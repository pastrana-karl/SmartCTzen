[{"D:\\Projects\\SmartCTzen\\client\\src\\index.js":"1","D:\\Projects\\SmartCTzen\\client\\src\\App.js":"2","D:\\Projects\\SmartCTzen\\client\\src\\context\\Context.js":"3","D:\\Projects\\SmartCTzen\\client\\src\\context\\Reducer.js":"4","D:\\Projects\\SmartCTzen\\client\\src\\components\\Landing\\Register\\Progress.js":"5","D:\\Projects\\SmartCTzen\\client\\src\\components\\SuperAdmin\\SaSideBar.js":"6","D:\\Projects\\SmartCTzen\\client\\src\\components\\Landing\\Navigation\\LandingNavBar.js":"7","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Feature\\Features.js":"8","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\ThirdStep.js":"9","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\CitizenEmail\\CitizenEmail.js":"10","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Home\\Home.js":"11","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\CitizenLogin\\CitizenLogin.js":"12","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\FourthStep.js":"13","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\SixthStep.js":"14","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\FifthStep.js":"15","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\FirstStep.js":"16","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\SecondStep.js":"17","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAContentHome\\SAContentHome.js":"18","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\SeventhStep.js":"19","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAFeaturedMember\\SAFeaturedMember.js":"20","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAEula\\SAEula.js":"21","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAForgot\\SAForgot.js":"22","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\CitizenForgot\\CitizenForgot.js":"23","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAEmail\\SAEmail.js":"24","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SALogin\\SALogin.js":"25","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAFeatures\\SAFeatures.js":"26","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAContentFeature\\SAContentFeature.js":"27","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAAddFeature\\SAAddFeature.js":"28","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAAccount\\SAAccount.js":"29","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SASearchAdmin\\SASearchAdmin.js":"30","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAManage\\SAManage.js":"31","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminEmail\\AdminEmail.js":"32","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminProfile\\AdminProfile.js":"33","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAAnnouncements\\SAAnnouncements.js":"34","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAAddFeaturedMember\\SAAddFeaturedMember.js":"35","D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAAddAdmin\\SAAddAdmin.js":"36","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminProposals\\AdminProposals.js":"37","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminForgot\\AdminForgot.js":"38","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminUsers\\AdminUsers.js":"39","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\Applicants\\Applicants.js":"40","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminUpdateProject\\AdminUpdateProject.js":"41","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminCreateProjects\\AdminCreateProjects.js":"42","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminReportsDashboard\\AdminReportsDashboard.js":"43","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminLogin\\AdminLogin.js":"44","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminCreateProposals\\AdminCreateProposals.js":"45","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminReports\\AdminReports.js":"46","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminProjects\\AdminProjects.js":"47","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminProposalsDashboard\\AdminProposalsDashboard.js":"48","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\SingleUsers\\SingleUsers.js":"49","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminEachProject\\AdminEachProject.js":"50","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\SingleApplicants\\SingleApplicants.js":"51","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminEachReport\\AdminEachReport.js":"52","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminMessages\\AdminMessages.js":"53","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminEachProposal\\AdminEachProposal.js":"54","D:\\Projects\\SmartCTzen\\client\\src\\components\\Citizen\\CitizenNav\\CitizenNav.jsx":"55","D:\\Projects\\SmartCTzen\\client\\src\\components\\Citizen\\ReportsNav\\ReportsNav.jsx":"56","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProfile\\CitizenPassUpdate\\CitizenPassUpdate.jsx":"57","D:\\Projects\\SmartCTzen\\client\\src\\components\\Citizen\\ProposalNav\\ProposalNav.jsx":"58","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProjects\\CitizenViewProject\\CitizenViewProject.jsx":"59","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProjects\\CitizenProjects.jsx":"60","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\CitizenReports.jsx":"61","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\SubmitReport\\CitizenSubmitReport.jsx":"62","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProposals\\CitizenProposals.jsx":"63","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProfile\\CitizenProfile.jsx":"64","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProposals\\CreateProposals\\CitizenCreateProposals.jsx":"65","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\ViewReports\\CitizenViewReport.jsx":"66","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\ChatReports\\CitizenChatReport.jsx":"67","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProposals\\ViewProposals\\CitizenViewProposal.jsx":"68","D:\\Projects\\SmartCTzen\\client\\src\\components\\SuperAdmin\\SaSideBarData.js":"69","D:\\Projects\\SmartCTzen\\client\\src\\components\\SuperAdmin\\SaSubMenu.js":"70","D:\\Projects\\SmartCTzen\\client\\src\\components\\Landing\\Footer\\Footer.js":"71","D:\\Projects\\SmartCTzen\\client\\src\\api_calls\\adminApiCall.js":"72","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminLayout\\AdminLayout.js":"73","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminMessages\\AdminConversations\\AdminConversations.js":"74","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Buttons\\LoginButton\\LoginButton.js":"75","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Tables\\Tables.js":"76","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Buttons\\SubmitButton\\SubmitButton.js":"77","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Buttons\\CancelButton\\CancelButton.js":"78","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Cards\\CardDashboard\\CardSummary.js":"79","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Cards\\CardDashboard\\CardGraph\\CardGraph.js":"80","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Input\\Input.js":"81","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Cards\\CardForm\\CardForm.js":"82","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Cards\\CardHeader\\CardHeader.js":"83","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminMessages\\AdminMessage\\AdminMessage.js":"84","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Input\\FormikInput\\FormikInput.js":"85","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\ChatReports\\ChatOnline\\CitizenChatOnline.jsx":"86","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\ChatReports\\CitizenMessage\\CitizenMessage.jsx":"87","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\ChatReports\\CitizenConversations\\CitizenConversations.jsx":"88","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Navigation\\Toolbar\\Toolbar.js":"89","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Navigation\\NavigationItems\\NavigationItems.js":"90","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js":"91","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Buttons\\AdminProfileButton\\AdminProfileButton.js":"92"},{"size":502,"mtime":1632365168664,"results":"93","hashOfConfig":"94"},{"size":14896,"mtime":1633314726355,"results":"95","hashOfConfig":"94"},{"size":1216,"mtime":1631929926675,"results":"96","hashOfConfig":"94"},{"size":3965,"mtime":1632726352419,"results":"97","hashOfConfig":"94"},{"size":2508,"mtime":1630907286701,"results":"98","hashOfConfig":"94"},{"size":4061,"mtime":1632629366672,"results":"99","hashOfConfig":"94"},{"size":1886,"mtime":1631518050460,"results":"100","hashOfConfig":"94"},{"size":5002,"mtime":1632039421578,"results":"101","hashOfConfig":"94"},{"size":7516,"mtime":1633232615318,"results":"102","hashOfConfig":"94"},{"size":4355,"mtime":1632726042144,"results":"103","hashOfConfig":"94"},{"size":9631,"mtime":1632801320183,"results":"104","hashOfConfig":"94"},{"size":4032,"mtime":1632484710394,"results":"105","hashOfConfig":"94"},{"size":3656,"mtime":1632554210592,"results":"106","hashOfConfig":"94"},{"size":4229,"mtime":1632554393586,"results":"107","hashOfConfig":"94"},{"size":3661,"mtime":1632554339836,"results":"108","hashOfConfig":"94"},{"size":9254,"mtime":1632816924526,"results":"109","hashOfConfig":"94"},{"size":2988,"mtime":1632554863479,"results":"110","hashOfConfig":"94"},{"size":9944,"mtime":1632906515974,"results":"111","hashOfConfig":"94"},{"size":10297,"mtime":1632817327919,"results":"112","hashOfConfig":"94"},{"size":2633,"mtime":1632629366896,"results":"113","hashOfConfig":"94"},{"size":3383,"mtime":1632651341734,"results":"114","hashOfConfig":"94"},{"size":2542,"mtime":1632718430134,"results":"115","hashOfConfig":"94"},{"size":3502,"mtime":1632725017830,"results":"116","hashOfConfig":"94"},{"size":3386,"mtime":1632715742028,"results":"117","hashOfConfig":"94"},{"size":2946,"mtime":1632651341734,"results":"118","hashOfConfig":"94"},{"size":2757,"mtime":1632629366908,"results":"119","hashOfConfig":"94"},{"size":2965,"mtime":1632801320187,"results":"120","hashOfConfig":"94"},{"size":8492,"mtime":1632629366784,"results":"121","hashOfConfig":"94"},{"size":9136,"mtime":1632982906991,"results":"122","hashOfConfig":"94"},{"size":3674,"mtime":1632982698166,"results":"123","hashOfConfig":"94"},{"size":3483,"mtime":1632629366913,"results":"124","hashOfConfig":"94"},{"size":3385,"mtime":1632722170851,"results":"125","hashOfConfig":"94"},{"size":13699,"mtime":1633252440649,"results":"126","hashOfConfig":"94"},{"size":2346,"mtime":1632629366793,"results":"127","hashOfConfig":"94"},{"size":7491,"mtime":1632629366788,"results":"128","hashOfConfig":"94"},{"size":5913,"mtime":1632801320186,"results":"129","hashOfConfig":"94"},{"size":2771,"mtime":1633224447223,"results":"130","hashOfConfig":"94"},{"size":2510,"mtime":1632721861812,"results":"131","hashOfConfig":"94"},{"size":2977,"mtime":1633319260972,"results":"132","hashOfConfig":"94"},{"size":2792,"mtime":1633087179499,"results":"133","hashOfConfig":"94"},{"size":14310,"mtime":1633252440654,"results":"134","hashOfConfig":"94"},{"size":19662,"mtime":1633252440639,"results":"135","hashOfConfig":"94"},{"size":4954,"mtime":1632812360246,"results":"136","hashOfConfig":"94"},{"size":3773,"mtime":1632727220732,"results":"137","hashOfConfig":"94"},{"size":23842,"mtime":1633252440639,"results":"138","hashOfConfig":"94"},{"size":2133,"mtime":1632906500141,"results":"139","hashOfConfig":"94"},{"size":2747,"mtime":1633224447223,"results":"140","hashOfConfig":"94"},{"size":4028,"mtime":1633140558876,"results":"141","hashOfConfig":"94"},{"size":11716,"mtime":1633317935984,"results":"142","hashOfConfig":"94"},{"size":2707,"mtime":1633252440645,"results":"143","hashOfConfig":"94"},{"size":10587,"mtime":1633316244129,"results":"144","hashOfConfig":"94"},{"size":3190,"mtime":1633252440649,"results":"145","hashOfConfig":"94"},{"size":6366,"mtime":1633312454852,"results":"146","hashOfConfig":"94"},{"size":5481,"mtime":1633309877939,"results":"147","hashOfConfig":"94"},{"size":3134,"mtime":1633065809109,"results":"148","hashOfConfig":"94"},{"size":1027,"mtime":1632288578959,"results":"149","hashOfConfig":"94"},{"size":4478,"mtime":1633232615308,"results":"150","hashOfConfig":"94"},{"size":733,"mtime":1632288578955,"results":"151","hashOfConfig":"94"},{"size":2155,"mtime":1633224447333,"results":"152","hashOfConfig":"94"},{"size":4269,"mtime":1633224447328,"results":"153","hashOfConfig":"94"},{"size":8380,"mtime":1633311271743,"results":"154","hashOfConfig":"94"},{"size":11146,"mtime":1633252440664,"results":"155","hashOfConfig":"94"},{"size":13674,"mtime":1633252440659,"results":"156","hashOfConfig":"94"},{"size":18150,"mtime":1633252440659,"results":"157","hashOfConfig":"94"},{"size":17612,"mtime":1633252440664,"results":"158","hashOfConfig":"94"},{"size":1561,"mtime":1632552767751,"results":"159","hashOfConfig":"94"},{"size":8107,"mtime":1633314465904,"results":"160","hashOfConfig":"94"},{"size":14233,"mtime":1633309877992,"results":"161","hashOfConfig":"94"},{"size":789,"mtime":1631698332154,"results":"162","hashOfConfig":"94"},{"size":1966,"mtime":1631686854886,"results":"163","hashOfConfig":"94"},{"size":2183,"mtime":1631520057495,"results":"164","hashOfConfig":"94"},{"size":364,"mtime":1632288578857,"results":"165","hashOfConfig":"94"},{"size":1584,"mtime":1632727118990,"results":"166","hashOfConfig":"94"},{"size":1312,"mtime":1633313293378,"results":"167","hashOfConfig":"94"},{"size":210,"mtime":1630373983068,"results":"168","hashOfConfig":"94"},{"size":254,"mtime":1630124291336,"results":"169","hashOfConfig":"94"},{"size":253,"mtime":1632965216307,"results":"170","hashOfConfig":"94"},{"size":255,"mtime":1632982896626,"results":"171","hashOfConfig":"94"},{"size":286,"mtime":1632629319830,"results":"172","hashOfConfig":"94"},{"size":205,"mtime":1632629319795,"results":"173","hashOfConfig":"94"},{"size":425,"mtime":1633087166890,"results":"174","hashOfConfig":"94"},{"size":250,"mtime":1631337799096,"results":"175","hashOfConfig":"94"},{"size":211,"mtime":1629626169110,"results":"176","hashOfConfig":"94"},{"size":637,"mtime":1633309877986,"results":"177","hashOfConfig":"94"},{"size":359,"mtime":1633224447274,"results":"178","hashOfConfig":"94"},{"size":1984,"mtime":1633312719437,"results":"179","hashOfConfig":"94"},{"size":545,"mtime":1633309878038,"results":"180","hashOfConfig":"94"},{"size":1228,"mtime":1633313144180,"results":"181","hashOfConfig":"94"},{"size":219,"mtime":1629626169652,"results":"182","hashOfConfig":"94"},{"size":245,"mtime":1629626169525,"results":"183","hashOfConfig":"94"},{"size":462,"mtime":1631932523519,"results":"184","hashOfConfig":"94"},{"size":297,"mtime":1629626169018,"results":"185","hashOfConfig":"94"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zotif",{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"191"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\SmartCTzen\\client\\src\\index.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\App.js",["398","399"],"import React, { useState, useContext } from 'react';\r\nimport { Context } from './context/Context';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\n\r\nimport LandingNavBar from './components/Landing/Navigation/LandingNavBar';\r\nimport Home from './pages/Landing/Home/Home';\r\nimport CitizenLogin from './pages/Landing/CitizenLogin/CitizenLogin';\r\nimport CitizenForgot from './pages/Landing/CitizenForgot/CitizenForgot';\r\nimport CitizenEmail from './pages/Landing/CitizenEmail/CitizenEmail';\r\nimport Features from './pages/Landing/Feature/Features';\r\nimport Progress from './components/Landing/Register/Progress';\r\nimport FirstStep from './pages/Landing/Register/FirstStep';\r\nimport SecondStep from './pages/Landing/Register/SecondStep';\r\nimport ThirdStep from './pages/Landing/Register/ThirdStep';\r\nimport FourthStep from './pages/Landing/Register/FourthStep';\r\nimport FifthStep from './pages/Landing/Register/FifthStep';\r\nimport SixthStep from './pages/Landing/Register/SixthStep';\r\nimport SeventhStep from './pages/Landing/Register/SeventhStep';\r\n\r\nimport CitizenNavBar from './components/Citizen/CitizenNav/CitizenNav';\r\nimport CitizenProfile from './pages/Citizen/CitizenProfile/CitizenProfile';\r\nimport CitizenProposals from './pages/Citizen/CitizenProposals/CitizenProposals';\r\nimport CitizenReports from './pages/Citizen/CitizenReports/CitizenReports';\r\nimport CitizenProjects from './pages/Citizen/CitizenProjects/CitizenProjects';\r\n\r\nimport AdminForgot from './components/AllAdmin/Administrator/AdminForgot/AdminForgot';\r\nimport AdminEmail from './components/AllAdmin/Administrator/AdminEmail/AdminEmail';\r\nimport AdminProfile from './components/AllAdmin/Administrator/AdminProfile/AdminProfile';\r\nimport AdminLogin from './components/AllAdmin/Administrator/AdminLogin/AdminLogin';\r\nimport AdminProposals from './components/AllAdmin/Administrator/AdminProposals/AdminProposals';\r\nimport AdminReports from './components/AllAdmin/Administrator/AdminReports/AdminReports';\r\nimport AdminMessages from './components/AllAdmin/Administrator/AdminMessages/AdminMessages';\r\nimport AdminProjects from './components/AllAdmin/Administrator/AdminProjects/AdminProjects';\r\nimport AdminUsers from './components/AllAdmin/Administrator/AdminUsers/AdminUsers';\r\nimport Applicants from './components/AllAdmin/Administrator/Applicants/Applicants';\r\nimport SingleApplicants from './components/AllAdmin/Administrator/SingleApplicants/SingleApplicants';\r\nimport SingleUsers from './components/AllAdmin/Administrator/SingleUsers/SingleUsers';\r\nimport AdminCreateProposals from './components/AllAdmin/Administrator/AdminCreateProposals/AdminCreateProposals';\r\nimport AdminCreateProjects from './components/AllAdmin/Administrator/AdminCreateProjects/AdminCreateProjects';\r\n\r\nimport CitizenPassUpdate from './pages/Citizen/CitizenProfile/CitizenPassUpdate/CitizenPassUpdate';\r\nimport CitizenCreateProposal from './pages/Citizen/CitizenProposals/CreateProposals/CitizenCreateProposals';\r\nimport CitizenViewProposal from './pages/Citizen/CitizenProposals/ViewProposals/CitizenViewProposal';\r\nimport CitizenViewReport from './pages/Citizen/CitizenReports/ViewReports/CitizenViewReport';\r\nimport CitizenSubmitReport from './pages/Citizen/CitizenReports/SubmitReport/CitizenSubmitReport';\r\nimport CitizenChatReport from './pages/Citizen/CitizenReports/ChatReports/CitizenChatReport';\r\nimport CitizenViewProject from './pages/Citizen/CitizenProjects/CitizenViewProject/CitizenViewProject';\r\nimport ProposalNav from './components/Citizen/ProposalNav/ProposalNav';\r\nimport ReportsNav from './components/Citizen/ReportsNav/ReportsNav';\r\n\r\nimport SANavBar from './components/SuperAdmin/SaSideBar';\r\nimport SALogin from './pages/SuperAdmin/SALogin/SALogin';\r\nimport SAForgot from './pages/SuperAdmin/SAForgot/SAForgot';\r\nimport SAEmail from './pages/SuperAdmin/SAEmail/SAEmail';\r\nimport SAContentHome from './pages/SuperAdmin/SAContentHome/SAContentHome';\r\nimport SAAnnouncements from './pages/SuperAdmin/SAAnnouncements/SAAnnouncements';\r\nimport SAFeaturedMember from './pages/SuperAdmin/SAFeaturedMember/SAFeaturedMember';\r\nimport SAEula from './pages/SuperAdmin/SAEula/SAEula';\r\nimport SAAddFeaturedMember from './pages/SuperAdmin/SAAddFeaturedMember/SAAddFeaturedMember';\r\nimport SAContentFeature from './pages/SuperAdmin/SAContentFeature/SAContentFeature';\r\nimport SAAddFeature from './pages/SuperAdmin/SAAddFeature/SAAddFeature';\r\nimport SAFeatures from './pages/SuperAdmin/SAFeatures/SAFeatures';\r\nimport SAManage from './pages/SuperAdmin/SAManage/SAManage';\r\nimport SASearchAdmin from './pages/SuperAdmin/SASearchAdmin/SASearchAdmin';\r\nimport SAAddAdmin from './pages/SuperAdmin/SAAddAdmin/SAAddAdmin';\r\nimport SAAccount from './pages/SuperAdmin/SAAccount/SAAccount';\r\nimport AdminReportsDashboard from './components/AllAdmin/Administrator/AdminReportsDashboard/AdminReportsDashboard';\r\nimport AdminProposalsDashboard from './components/AllAdmin/Administrator/AdminProposalsDashboard/AdminProposalsDashboard';\r\nimport AdminEachProposal from './components/AllAdmin/Administrator/AdminEachProposal/AdminEachProposal';\r\nimport AdminEachProject from './components/AllAdmin/Administrator/AdminEachProject/AdminEachProject';\r\nimport AdminEachReport from './components/AllAdmin/Administrator/AdminEachReport/AdminEachReport';\r\nimport AdminUpdateProject from './components/AllAdmin/Administrator/AdminUpdateProject/AdminUpdateProject';\r\n\r\nconst App = () => {\r\n\r\n  //Register data passing...\r\n  const [citizen, setCitizen] = useState({});\r\n\r\n  const updateCitizen = (data) => {\r\n    setCitizen((prevCitizen) => ({ ...prevCitizen, ...data }));\r\n  };\r\n\r\n  const resetCitizen = () => {\r\n    setCitizen({});\r\n  };\r\n\r\n  //Citizen User...\r\n  const { user } = useContext(Context);\r\n\r\n  // console.log(user);\r\n\r\n  //Super Administrator User...\r\n  const { saUser } = useContext(Context);\r\n\r\n  //Administrator User...\r\n  const { aUser } = useContext(Context);\r\n\r\n  return (\r\n    <>\r\n      <LandingNavBar />\r\n      <Progress />\r\n\r\n      <CitizenNavBar />\r\n      {/* <ProposalNav /> */}\r\n\r\n      <SANavBar />\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Home />\r\n          </Route>\r\n\r\n          <Route path=\"/features\">\r\n            <Features />\r\n          </Route>\r\n\r\n          <Route path=\"/login\">\r\n            {user ? <Redirect to=\"/citizen-profile\" /> : <CitizenLogin />}\r\n          </Route>\r\n\r\n          <Route path=\"/forgot-password\">\r\n            {user ? <Redirect to=\"/citizen-profile\" /> : <CitizenForgot />}\r\n          </Route>\r\n\r\n          <Route path=\"/change-password/:token\">\r\n            {user ? <Redirect to=\"/citizen-profile\" /> : <CitizenEmail />}\r\n          </Route>\r\n\r\n          <Route\r\n             render={(props) => (\r\n              <FirstStep {...props} citizen={citizen} updateCitizen={updateCitizen} resetCitizen={resetCitizen}/>\r\n            )}\r\n            path=\"/create-account\"\r\n             exact={true}\r\n          />\r\n\r\n          <Route\r\n            render={(props) => (\r\n              <SecondStep {...props} citizen={citizen} updateCitizen={updateCitizen} />\r\n            )}\r\n            path=\"/second\"\r\n          />\r\n\r\n          <Route\r\n            render={(props) => (\r\n              <ThirdStep {...props} citizen={citizen} updateCitizen={updateCitizen} />\r\n            )}\r\n            path=\"/third\"\r\n          />\r\n\r\n          <Route\r\n            render={(props) => (\r\n              <FourthStep {...props} citizen={citizen} updateCitizen={updateCitizen} />\r\n            )}\r\n            path=\"/fourth\"\r\n          />\r\n\r\n          <Route\r\n            render={(props) => (\r\n              <FifthStep {...props} citizen={citizen} updateCitizen={updateCitizen} />\r\n            )}\r\n            path=\"/fifth\"\r\n          />\r\n\r\n          <Route\r\n            render={(props) => (\r\n              <SixthStep {...props} citizen={citizen} updateCitizen={updateCitizen} />\r\n            )}\r\n            path=\"/sixth\"\r\n          />\r\n\r\n          <Route\r\n            render={(props) => (\r\n              <SeventhStep {...props} citizen={citizen} updateCitizen={updateCitizen} resetCitizen={resetCitizen} />\r\n            )}\r\n            path=\"/seventh\"\r\n          />\r\n\r\n          {/**************************** CITIZEN Routes ****************************/}\r\n\r\n          <Route path=\"/citizen-profile\">  \r\n            {user ? <CitizenProfile /> : <Redirect to=\"/\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/citizen-pass-update\">\r\n            {user ? <CitizenPassUpdate /> : <Redirect to=\"/\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/citizen-proposals\">\r\n            {user ? <CitizenProposals /> : <Redirect to=\"/\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/citizen-view-proposals\">\r\n            <CitizenViewProposal/>\r\n          </Route>\r\n\r\n          <Route path=\"/citizen-create-proposals\">\r\n            {user ? <CitizenCreateProposal /> : <Redirect to=\"/\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/citizen-reports\">\r\n            {user ? <CitizenReports /> : <Redirect to=\"/\" />}\r\n          </Route> \r\n\r\n          <Route path=\"/citizen-view-reports\">\r\n            {user ? <CitizenViewReport /> : <Redirect to=\"/\" />}\r\n          </Route> \r\n\r\n          <Route path=\"/citizen-submit-reports\">\r\n            {user ? <CitizenSubmitReport /> : <Redirect to=\"/\" />}\r\n          </Route> \r\n\r\n          <Route path=\"/citizen-chat-report\">\r\n            {user ? <CitizenChatReport /> : <Redirect to=\"/\" />}\r\n          </Route> \r\n\r\n          <Route path=\"/citizen-projects\">\r\n            {user ? <CitizenProjects /> : <Redirect to=\"/\" />}\r\n          </Route> \r\n\r\n          <Route path=\"/citizen-view-project\">\r\n            {user ? <CitizenViewProject /> : <Redirect to=\"/\" />}\r\n          </Route> \r\n\r\n          {/**************************** ADMIN Routes ****************************/} \r\n\r\n          <Route path=\"/admin-login\">\r\n            {aUser ? <Redirect to=\"/admin-profile\" /> : <AdminLogin />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-forgot\">\r\n            <AdminForgot />\r\n          </Route>\r\n\r\n          <Route path=\"/admin-change/:token\">\r\n            <AdminEmail />\r\n          </Route>\r\n\r\n          <Route path=\"/admin-profile\">\r\n            {aUser ? <AdminProfile /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n          \r\n          <Route path=\"/admin-proposals\">\r\n            {aUser ? <AdminProposals /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n          \r\n          <Route path=\"/admin-proposal/:id\">\r\n            {aUser ? <AdminEachProposal /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-create-proposals\">\r\n            {aUser ? <AdminCreateProposals /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-reports\">\r\n            {aUser ? <AdminReports /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-report/:id\">\r\n            {aUser ? <AdminEachReport /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-summary/reports\">\r\n            {aUser ? <AdminReportsDashboard /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-messages\">\r\n            {aUser ? <AdminMessages /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-projects\">\r\n            {aUser ? <AdminProjects /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-project/:id\">\r\n            {aUser ? <AdminEachProject /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-summary/proposals\">\r\n            {aUser ? <AdminProposalsDashboard /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-create-projects\">\r\n            {aUser ? <AdminCreateProjects /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-update-project/:id\">\r\n            {aUser ? <AdminUpdateProject /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/admin-users\">\r\n            {aUser ? <AdminUsers /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/Applicants\">\r\n            {aUser ? <Applicants /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/Applicants-Verification\">\r\n            {aUser ? <SingleApplicants /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/Admin-viewUsers\">\r\n            {aUser ? <SingleUsers /> : <Redirect to=\"/admin-login\" />}\r\n          </Route>\r\n\r\n          {/**************************** SUPER ADMIN Routes ****************************/}\r\n          \r\n          <Route path=\"/superAdmin-login\">\r\n            {saUser ? <Redirect to=\"/SAContent-home\" /> : <SALogin />}\r\n          </Route>\r\n\r\n          <Route path=\"/superAdmin-forgot\">\r\n            <SAForgot />\r\n          </Route>\r\n\r\n          <Route path=\"/superAdmin-changePassword/:token\">\r\n            <SAEmail />\r\n          </Route>\r\n\r\n          <Route path=\"/SAContent-home\">\r\n            {saUser ? <SAContentHome /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/SAContent-announcements\">\r\n            {saUser ? <SAAnnouncements /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/SAContent-FeaturedMember\">\r\n            {saUser ? <SAFeaturedMember /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/SAContent-Eula\">\r\n            {saUser ? <SAEula /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/SAContent-addFeaturedMember\">\r\n            {saUser ? <SAAddFeaturedMember /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/SAContent-feature\">\r\n            {saUser ? <SAContentFeature /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/SAAdd-feature\">\r\n            {saUser ? <SAAddFeature /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/SA-feature\">\r\n            {saUser ? <SAFeatures /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/SAManage-admin\">\r\n            {saUser ? <SAManage /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/SASearch-admin\">\r\n            {saUser ? <SASearchAdmin /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/SAAdd-admin\">\r\n            {saUser ? <SAAddAdmin /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route path=\"/SA-account\">\r\n            {saUser ? <SAAccount /> : <Redirect to=\"/superAdmin-login\" />}\r\n          </Route>\r\n\r\n          <Route render={() => <Redirect to=\"/\" />} />\r\n\r\n        </Switch>\r\n    </>\r\n  );\r\n} \r\n\r\nexport default App;\r\n",["400","401"],"D:\\Projects\\SmartCTzen\\client\\src\\context\\Context.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\context\\Reducer.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\Landing\\Register\\Progress.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\SuperAdmin\\SaSideBar.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\Landing\\Navigation\\LandingNavBar.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Feature\\Features.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\ThirdStep.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\CitizenEmail\\CitizenEmail.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Home\\Home.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\CitizenLogin\\CitizenLogin.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\FourthStep.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\SixthStep.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\FifthStep.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\FirstStep.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\SecondStep.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAContentHome\\SAContentHome.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\Register\\SeventhStep.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAFeaturedMember\\SAFeaturedMember.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAEula\\SAEula.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAForgot\\SAForgot.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Landing\\CitizenForgot\\CitizenForgot.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAEmail\\SAEmail.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SALogin\\SALogin.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAFeatures\\SAFeatures.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAContentFeature\\SAContentFeature.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAAddFeature\\SAAddFeature.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAAccount\\SAAccount.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SASearchAdmin\\SASearchAdmin.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAManage\\SAManage.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminEmail\\AdminEmail.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminProfile\\AdminProfile.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAAnnouncements\\SAAnnouncements.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAAddFeaturedMember\\SAAddFeaturedMember.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\SuperAdmin\\SAAddAdmin\\SAAddAdmin.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminProposals\\AdminProposals.js",["402","403"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport CardHeader from '../../../UI/Cards/CardHeader/CardHeader';\r\nimport Tables from '../../../UI/Tables/Tables';\r\nimport AdminLayout from '../AdminLayout/AdminLayout';\r\n\r\nimport { Context } from '../../../../context/Context';\r\n\r\nimport classes from './AdminProposals.module.css';\r\n\r\nconst AdminProposals = () => {\r\n    //Without AXIOS\r\n    const [proposals, setProposals] = useState();\r\n    \r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            const response = await fetch('api/proposals');\r\n            \r\n            const responseData = await response.json();\r\n\r\n            setProposals(responseData.data.proposals);\r\n        };\r\n        sendRequest();\r\n    }, []);\r\n\r\n    const string = 'watch?v=S_mgSHCWCmA';\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <AdminLayout>\r\n                <div className={classes.AdminProposals}>\r\n                    <CardHeader>\r\n                        <h2 className={classes.Text}>Proposals</h2>\r\n                    </CardHeader>\r\n                </div>\r\n                <Tables>\r\n                    <thead>\r\n                        <tr>            \r\n                            <th>ID</th>  \r\n                            <th>Title</th>\r\n                            <th>Location</th>\r\n                            <th>Upvote</th>\r\n                            <th>Downvote</th>\r\n                            <th>Status</th>\r\n                            <th>Created at</th>\r\n                            <th>Link</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {proposals && proposals.map((proposal) => (\r\n                        <tr key={proposal._id}>\r\n                            <td>{proposal._id}</td>\r\n                            <td>{proposal.title}</td>\r\n                            <td>{proposal.location}</td>\r\n                            <td>{proposal.upvote.length}</td>\r\n                            <td>{proposal.downvote.length}</td>\r\n                            <td>{proposal.status}</td>\r\n                            <td>{proposal.createdAt}</td>\r\n                            <td><Link to={'/admin-proposal/' + proposal._id}>Click here</Link></td>\r\n                        </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Tables>\r\n                <div className={classes.ButtonDiv}>\r\n                    <Link to='/admin-create-proposals'>\r\n                        <button className={classes.Button}>Create Proposals</button>\r\n                    </Link>\r\n                </div>\r\n            </AdminLayout>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default AdminProposals;","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminForgot\\AdminForgot.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminUsers\\AdminUsers.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\Applicants\\Applicants.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminUpdateProject\\AdminUpdateProject.js",["404","405","406"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport * as ReactBootStrap from 'react-bootstrap';\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport axios from 'axios';\r\nimport Swal from \"sweetalert2\";\r\nimport AdminLayout from '../AdminLayout/AdminLayout';\r\nimport CardHeader from '../../../UI/Cards/CardHeader/CardHeader';\r\nimport { Context } from '../../../../context/Context';\r\nimport classes from './AdminUpdateProject.module.css';\r\n\r\n\r\nconst AdminUpdateProject = () => {\r\n    const { aUser } = useContext(Context);\r\n    const [currentProject, setCurrentProject] = useState([]);\r\n    const params = useParams();\r\n    const [redirect, setRedirect] = useState(false);\r\n    const [loading, setLoading] =  useState(true);\r\n\r\n    useEffect(() => {\r\n        const findProject = async () => {\r\n          const response = await fetch('/api/projects/' + params.id);\r\n          const responseData = await response.json();\r\n          //console.log(responseData);\r\n          setCurrentProject(responseData.data.project);\r\n        }\r\n        findProject();\r\n    }, []);\r\n\r\n    const defaultValues = {\r\n        title: currentProject.title,\r\n        description: currentProject.description,\r\n        location: currentProject.location,\r\n        coverImage: currentProject.coverImage\r\n    }\r\n\r\n    //console.log(currentProject.coverImage);\r\n\r\n    const { register, handleSubmit, errors, reset, control } = useForm({ defaultValues });\r\n    //console.log(currentProject);\r\n    // const preloadedValues = {\r\n    //     title: currentProject.title,\r\n    //     description: currentProject.description,\r\n    //     location: currentProject.location,\r\n    //     coverImage: currentProject.coverImage\r\n    // }\r\n\r\n\r\n    // const { register, handleSubmit, errors } = useForm({\r\n    //     defaultValue: preloadedValues\r\n    // });\r\n\r\n      const onSubmit = async (data) => {\r\n        console.log(data);\r\n        const coverImage = '';\r\n\r\n        const updateProject = {\r\n            // userId: aUser.data.user.userId,\r\n            userName: aUser.data.user.username,\r\n            userType: aUser.data.user.userType,\r\n            title: data.title,\r\n            description: data.description,\r\n            location: data.location,\r\n            status: currentProject.status,\r\n            coverImage\r\n        };\r\n\r\n        setLoading(false);\r\n        const formData = new FormData();\r\n        const filename = Date.now() + data.coverImage[0].name;\r\n        formData.append('name', filename);\r\n        formData.append('file', data.coverImage[0]);\r\n        formData.append(\"upload_preset\", \"dev_prac\");\r\n        formData.append(\"cloud_name\", \"karlstorage\");\r\n\r\n        try {\r\n            const res = await axios.post(\"https://api.cloudinary.com/v1_1/karlstorage/image/upload\", formData);\r\n            updateProject.coverImage = res.data.secure_url;\r\n\r\n            try {\r\n                const res = await axios.put(`/api/projects/update-projects/${params.id}`, updateProject);\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Updated!',\r\n                    text: 'Project updated . . .'\r\n                });\r\n                \r\n                setLoading(true);\r\n                setRedirect(true);\r\n            } catch (err) {\r\n                console.log(err);\r\n                setLoading(true);\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log (err);\r\n            setLoading(true);\r\n        }\r\n        // await axios.post('/api/proposals', formData);\r\n        // console.log(data.coverImage[0].name);\r\n    }\r\n\r\n    // console.log(currentProject);\r\n    return (\r\n        <>\r\n        { redirect && (<Redirect to = '/admin-projects' />) }\r\n        {loading ? (\r\n        <AdminLayout>\r\n            <div className={classes.AdminProjects}>\r\n                <CardHeader>\r\n                    <h2 className={classes.Text}>Projects</h2>\r\n                </CardHeader>\r\n            </div>\r\n            <div className={classes.AdminUpdateProjectsContentDiv}>\r\n                <form className={classes.AdminUpdateProjectsForm} onSubmit={handleSubmit(onSubmit)}>\r\n                    <div className={classes.AdminUpdateProjectsFormDiv}>\r\n                        <div className={classes.AdminUpdateProjectsFormInput}>\r\n                            <label>Project Title</label>\r\n                            <input\r\n                                className={classes.Input}\r\n                                type='text'\r\n                                id='title'\r\n                                name='title'\r\n                                placeholder='Project Title'\r\n                                defaultValue={defaultValues.title}\r\n                                readOnly\r\n                            />\r\n                            {errors.title && <p className={classes.InputValidation}>{errors.title.message}</p>}\r\n                        </div>\r\n                        <div className={classes.AdminUpdateProjectsFormInput}>\r\n                            <label>Description</label>\r\n                            <textarea\r\n                                className={classes.Textarea}\r\n                                type='textfield'\r\n                                id='description'\r\n                                name='description'\r\n                                placeholder='Description'\r\n                                defaultValue={defaultValues.description}\r\n                                ref={register({ required: \"Required!\" })}\r\n                            />\r\n                            {errors.description && <p className={classes.InputValidation}>{errors.description.message}</p>}\r\n                        </div>\r\n                        <div className={classes.AdminUpdateProjectsFormInput}>\r\n                            <label>Location</label>\r\n                            <input\r\n                                className={classes.Input}\r\n                                type='text'\r\n                                id='location'\r\n                                name='location'\r\n                                placeholder='Location'\r\n                                defaultValue={defaultValues.location}\r\n                                readOnly\r\n                            />\r\n                            {errors.location && <p className={classes.InputValidation}>{errors.location.message}</p>}\r\n                        </div>\r\n                        <div className={classes.AdminUpdateProjectsFormInput}>\r\n                            <label>Cover Image</label>\r\n                            <input\r\n                                type='file'\r\n                                id='coverImage'\r\n                                name='coverImage'\r\n                                placeholder='Insert Image'\r\n                                files={defaultValues.coverImage}\r\n                                ref={register({ required: \"Required!\" })}\r\n                            />\r\n                            {errors.coverImage && <p className={classes.InputValidation}>{errors.coverImage.message}</p>}\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.ButtonDiv}>\r\n                        <button className={classes.UpdateButton} type=\"submit\" >Update</button>\r\n                        <button className={classes.LoadButton} type=\"button\" onClick={() => {\r\n                            console.log('Button');\r\n                            reset({ defaultValues })\r\n                        }}>Reset Data</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </AdminLayout>\r\n          ) : (\r\n                    <div style = {{\r\n                        color: '#777',\r\n                        textAlign: 'center',\r\n                    }}>\r\n                      <h2 style = {{marginTop: '10%'}}>Processing Please Wait</h2>\r\n                      <div>\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"primary\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"secondary\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"success\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"danger\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"warning\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"info\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"light\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"dark\" />\r\n                      </div>\r\n                    </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AdminUpdateProject;\r\n\r\n// const AdminUpdateProject = () => {\r\n//     const { aUser } = useContext(Context);\r\n//     const [userId, setUserId] = useState();\r\n//     const [redirect, setRedirect] = useState(false);\r\n//     const [file, setFile] = useState(null);\r\n//     const userType = aUser.data.user.userType;\r\n\r\n//     const [currentProject, setCurrentProject] = useState([]);\r\n//     const [formValues, setFormValues] = useState(null);\r\n\r\n//     const params = useParams();\r\n\r\n//     useEffect(() => {\r\n//         const findProject = async () => {\r\n//           const response = await fetch('/api/projects/' + params.id);\r\n//           const responseData = await response.json();\r\n//           console.log(responseData);\r\n//           setCurrentProject(responseData.data.project);\r\n//         }\r\n//         findProject();\r\n//     }, []);\r\n\r\n//     const initialValues = {\r\n//         userId: aUser.data.user._id,\r\n//         userName: aUser.data.user.username,\r\n//         title: '',\r\n//         description: '',\r\n//         location: ''\r\n//     };\r\n    \r\n//     const validationSchema = Yup.object({\r\n//         title: Yup.string().required('Required!'),\r\n//         description: Yup.string().required('Required!'),\r\n//         location: Yup.string().required('Required!')\r\n//     });\r\n\r\n//     const onSubmit = values => {\r\n//         // console.log('Form values', values);\r\n//         // console.log('ID: ', values._id)\r\n\r\n//         console.log(values);\r\n\r\n//         //axios.patch('/api/projects/' + params.id, values);\r\n\r\n//     }\r\n   \r\n//     return (\r\n//         <AdminLayout>\r\n//             <div className={classes.AdminProjects}>\r\n//                 <CardHeader>\r\n//                     <h2 className={classes.Text}>Projects</h2>\r\n//                 </CardHeader>\r\n//             </div>\r\n//             <div className={classes.AdminUpdateProjectsContentDiv}>\r\n//                 <Formik\r\n//                     initialValues={formValues || initialValues}\r\n//                     validationSchema={validationSchema}\r\n//                     onSubmit={onSubmit}\r\n//                     enableReinitialize>\r\n//                     <Form className={classes.AdminUpdateProjectsForm}>\r\n//                         <div className={classes.AdminUpdateProjectsFormDiv}>\r\n//                             <div className={classes.AdminUpdateProjectsFormInput}>\r\n//                                 <label>Project Title</label>\r\n//                                 <Field\r\n//                                     className={classes.Input}\r\n//                                     type='text'\r\n//                                     id='title'\r\n//                                     name='title'\r\n//                                     placeholder='Project Title'\r\n//                                 />\r\n//                                 <ErrorMessage name='title' />\r\n//                             </div>\r\n//                             <div className={classes.AdminUpdateProjectsFormInput}>\r\n//                                 <label>Description</label>\r\n//                                 <Field\r\n//                                     className={classes.Textarea}\r\n//                                     type='text'\r\n//                                     component='textarea'\r\n//                                     rows={4}\r\n//                                     id='description'\r\n//                                     name='description'\r\n//                                     placeholder='Description'\r\n//                                 />\r\n//                                 <ErrorMessage name='description' />\r\n//                             </div>\r\n//                             <div className={classes.AdminUpdateProjectsFormInput}>\r\n//                                 <label>Location</label>\r\n//                                 <Field\r\n//                                     className={classes.FormikInput}\r\n//                                     type='text'\r\n//                                     id='location'\r\n//                                     name='location'\r\n//                                     placeholder='Location'\r\n//                                 />\r\n//                                 <ErrorMessage name='location' />\r\n//                             </div>\r\n//                             <div className={classes.AdminUpdateProjectsFormInput}>\r\n//                                 <label>Location</label>\r\n//                                 <Field\r\n//                                     type='file'\r\n//                                     id='file'\r\n//                                     name='file'\r\n//                                     placeholder='File'\r\n//                                 />\r\n//                                 <ErrorMessage name='file' />\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className={classes.ButtonDiv}>\r\n//                             <button className={classes.UpdateButton} type=\"submit\" >Update</button>\r\n//                             <button className={classes.LoadButton} type=\"button\" onClick={() => {\r\n//                                 console.log('Button');\r\n//                                 setFormValues(currentProject);\r\n//                             }}>Load Data</button>\r\n//                         </div>\r\n//                     </Form>\r\n//                 </Formik>\r\n//             </div>\r\n//         </AdminLayout>\r\n//     );\r\n// }\r\n\r\n// export default AdminUpdateProject;","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminCreateProjects\\AdminCreateProjects.js",["407"],"import React, { useContext, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Redirect } from 'react-router-dom';\r\nimport * as ReactBootStrap from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport axios from 'axios';\r\nimport AdminLayout from '../AdminLayout/AdminLayout';\r\nimport CardHeader from '../../../UI/Cards/CardHeader/CardHeader';\r\nimport SubmitButton from '../../../UI/Buttons/SubmitButton/SubmitButton';\r\nimport CancelButton from '../../../UI/Buttons/CancelButton/CancelButton';\r\nimport { Context } from '../../../../context/Context';\r\n\r\nimport classes from './AdminCreateProjects.module.css';\r\n\r\nconst AdminCreateProjects = () => {\r\n    const { aUser } = useContext(Context);\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [redirect, setRedirect] = useState(false);\r\n    const [loading, setLoading] =  useState(true);\r\n\r\n    const onSubmit = async (data) => {\r\n        const coverImage = '';\r\n\r\n        const createProject = {\r\n            userName: data.userName,\r\n            title: data.title,\r\n            description: data.description,\r\n            location: data.location,\r\n            userType: aUser.data.user.userType,\r\n            coverImage\r\n        };\r\n\r\n        setLoading(false);\r\n        const formData = new FormData();\r\n        const filename = Date.now() + data.coverImage[0].name;\r\n        formData.append('name', filename);\r\n        formData.append('file', data.coverImage[0]);\r\n        formData.append(\"upload_preset\", \"dev_prac\");\r\n        formData.append(\"cloud_name\", \"karlstorage\");\r\n\r\n        try {\r\n            const res = await axios.post(\"https://api.cloudinary.com/v1_1/karlstorage/image/upload\", formData);\r\n            createProject.coverImage = res.data.secure_url;\r\n\r\n            try {\r\n                const res = await axios.post('/api/projects', createProject);\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Project Created!',\r\n                    text: 'Project is been posted . . .'\r\n                });\r\n\r\n                setLoading(true);\r\n                setRedirect(true);\r\n            } catch (err) {\r\n                setLoading(true);\r\n                console.log(err);\r\n            }\r\n\r\n        } catch (err) {\r\n            setLoading(true);\r\n            console.log (err);\r\n        }\r\n\r\n        // await axios.post('/api/proposals', formData);\r\n        // console.log(data.coverImage[0].name);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        { redirect && (<Redirect to = '/admin-projects' />) }\r\n        {loading ? (\r\n        <AdminLayout>\r\n            <div className={classes.AdminCreateProjectsHeader}>\r\n                <CardHeader>\r\n                    <h2 className={classes.Text}>Projects</h2>\r\n                </CardHeader>\r\n            </div>\r\n            <div className={classes.AdminCreateProjectsContentDiv}>\r\n                <form className={classes.AdminCreateProjectsForm} onSubmit={handleSubmit(onSubmit)}>\r\n                    <div className={classes.AdminCreateProjectsFormDiv}>\r\n                        <div className={classes.AdminCreateProjectsFormInput}>\r\n                            <label>Username</label>\r\n                            <input\r\n                                className={classes.Input}\r\n                                type='text'\r\n                                id='userName'\r\n                                name='userName'\r\n                                placeholder='Username'\r\n                                defaultValue={aUser.data.user.username}\r\n                                readOnly\r\n                                ref={register}\r\n                            />\r\n                            {errors.userName && <p className={classes.InputValidation}>{errors.userName.message}</p>}\r\n                        </div>\r\n                        <div className={classes.AdminCreateProjectsFormInput}>\r\n                            <label>Project Title</label>\r\n                            <input\r\n                                className={classes.Input}\r\n                                type='text'\r\n                                id='title'\r\n                                name='title'\r\n                                placeholder='Project Title'\r\n                                ref={register({ required: \"Required!\" })}\r\n                            />\r\n                            {errors.title && <p className={classes.InputValidation}>{errors.title.message}</p>}\r\n                        </div>\r\n                        <div className={classes.AdminCreateProjectsFormInput}>\r\n                            <label>Description</label>\r\n                            <textarea\r\n                                className={classes.Textarea}\r\n                                type='textfield'\r\n                                id='description'\r\n                                name='description'\r\n                                placeholder='Description'\r\n                                ref={register({ required: \"Required!\" })}\r\n                            />\r\n                            {errors.description && <p className={classes.InputValidation}>{errors.description.message}</p>}\r\n                        </div>\r\n                        <div className={classes.AdminCreateProjectsFormInput}>\r\n                            <label>Location</label>\r\n                            <input  \r\n                                className={classes.Input}\r\n                                type='text'\r\n                                id='location'\r\n                                name='location'\r\n                                placeholder='Location'\r\n                                ref={register({ required: \"Required!\" })}\r\n                            />\r\n                            {errors.location && <p className={classes.InputValidation}>{errors.location.message}</p>}\r\n                        </div>\r\n                        <div className={classes.AdminCreateProjectsFormInput}>\r\n                            <label>Image</label>\r\n                            <input\r\n                                type='file'\r\n                                id='coverImage'\r\n                                name='coverImage'\r\n                                placeholder='Insert Image'\r\n                                ref={register({ required: \"Required!\" })}\r\n                            />\r\n                            {errors.coverImage && <p className={classes.InputValidation}>{errors.coverImage.message}</p>}\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.ButtonDiv}>\r\n                        <SubmitButton />\r\n                        <CancelButton />\r\n                    </div>\r\n                </form>\r\n                <div className={classes.QuoteDiv}>\r\n                    <p className={classes.Quote}></p>\r\n                </div>\r\n            </div>\r\n        </AdminLayout>\r\n        ) : (\r\n                <div style = {{\r\n                    color: '#777',\r\n                    textAlign: 'center',\r\n                }}>\r\n                  <h2 style = {{marginTop: '10%'}}>Processing Please Wait</h2>\r\n                  <div>\r\n                    <ReactBootStrap.Spinner animation=\"grow\" variant=\"primary\" />\r\n                    <ReactBootStrap.Spinner animation=\"grow\" variant=\"secondary\" />\r\n                    <ReactBootStrap.Spinner animation=\"grow\" variant=\"success\" />\r\n                    <ReactBootStrap.Spinner animation=\"grow\" variant=\"danger\" />\r\n                    <ReactBootStrap.Spinner animation=\"grow\" variant=\"warning\" />\r\n                    <ReactBootStrap.Spinner animation=\"grow\" variant=\"info\" />\r\n                    <ReactBootStrap.Spinner animation=\"grow\" variant=\"light\" />\r\n                    <ReactBootStrap.Spinner animation=\"grow\" variant=\"dark\" />\r\n                  </div>\r\n                </div>\r\n        )}\r\n    </>\r\n    )\r\n}\r\n\r\nexport default AdminCreateProjects;\r\n\r\n// const AdminCreateProjects = () => {\r\n//     const { aUser } = useContext(Context);\r\n\r\n//     const validationSchema = Yup.object({\r\n//         userName: Yup.string().required('Required!'),\r\n//         title: Yup.string().required('Required!'),\r\n//         description: Yup.string().required('Required!'),\r\n//         location: Yup.string().required('Required!')\r\n//     });\r\n\r\n//     const formik = useFormik({\r\n//         initialValues: {\r\n//             userName: '',\r\n//             title: '',\r\n//             description: '',\r\n//             location: '',\r\n//         },\r\n//         onSubmit: values => {\r\n//             //const {...data} = values;\r\n\r\n//             console.log('Form data', values);\r\n//             axios.post('/api/projects/', values);\r\n//                 // .catch(err => {\r\n//                 //     console.log('Error: ', err);\r\n//                 // });\r\n//         },\r\n//         validationSchema\r\n//     });\r\n\r\n    \r\n//     return (\r\n//         <AdminLayout>\r\n//             <div className={classes.AdminCreateProjectsHeader}>\r\n//                 <CardHeader>\r\n//                     <h2 className={classes.Text}>Projects</h2>\r\n//                 </CardHeader>\r\n//             </div>\r\n//             <div className={classes.AdminCreateProjectsContentDiv}>\r\n//                 <form className={classes.AdminCreateProjectsForm} onSubmit={formik.handleSubmit}>\r\n//                     <div className={classes.AdminCreateProjectsFormDiv}>\r\n//                         <div className={classes.AdminCreateProjectsFormInput}>\r\n//                             <label>Username</label>\r\n//                             <Input\r\n//                                 type='text'\r\n//                                 id='userName'\r\n//                                 name='userName'\r\n//                                 placeholder='User'\r\n//                                 onChange={formik.handleChange}\r\n//                                 onBlur={formik.handleBlur}\r\n//                                 value={formik.values.userName}\r\n//                                 disable\r\n//                             />\r\n//                             { formik.touched.userName && formik.errors.userName ? (\r\n//                                 <div className={classes.InputValidation}>{formik.errors.userName}</div>\r\n//                                 ) : null }\r\n//                         </div>\r\n//                         <div className={classes.AdminCreateProjectsFormInput}>\r\n//                             <label>Project Title</label>\r\n//                             <Input\r\n//                                 type='text'\r\n//                                 id='title'\r\n//                                 name='title'\r\n//                                 placeholder='Project Title'\r\n//                                 onChange={formik.handleChange}\r\n//                                 onBlur={formik.handleBlur}\r\n//                                 value={formik.values.title}\r\n//                             />\r\n//                             { formik.touched.title && formik.errors.title ? (\r\n//                                 <div className={classes.InputValidation}>{formik.errors.title}</div>\r\n//                                 ) : null }\r\n//                         </div>\r\n//                         <div className={classes.AdminCreateProjectsFormInput}>\r\n//                             <label>Description</label>\r\n//                             <Input\r\n//                                 type='text'\r\n//                                 id='description'\r\n//                                 name='description'\r\n//                                 placeholder='Description'\r\n//                                 onChange={formik.handleChange}\r\n//                                 onBlur={formik.handleBlur}\r\n//                                 value={formik.values.description}\r\n//                             />\r\n//                             { formik.touched.description && formik.errors.description ? (\r\n//                                 <div className={classes.InputValidation}>{formik.errors.description}</div>\r\n//                                 ) : null }\r\n//                         </div>\r\n//                         <div className={classes.AdminCreateProjectsFormInput}>\r\n//                             <label>Location</label>\r\n//                             <Input\r\n//                                 type='text'\r\n//                                 id='location'\r\n//                                 name='location'\r\n//                                 placeholder='Location'\r\n//                                 onChange={formik.handleChange}\r\n//                                 onBlur={formik.handleBlur}\r\n//                                 value={formik.values.location}\r\n//                             />\r\n//                             { formik.touched.location && formik.errors.location ? (\r\n//                                 <div className={classes.InputValidation}>{formik.errors.location}</div>\r\n//                                 ) : null }\r\n//                         </div>\r\n//                     </div>\r\n//                     <div className={classes.ButtonDiv}>\r\n//                         <SubmitButton />\r\n//                         <CancelButton />\r\n//                     </div>\r\n//                 </form>\r\n//             </div>\r\n//         </AdminLayout>\r\n//     );\r\n// };\r\n\r\n// export default AdminCreateProjects;\r\n\r\n// import React from 'react';\r\n// import { Formik, Form, ErrorMessage } from 'formik';\r\n// import * as Yup from 'yup';\r\n\r\n// import CardHeader from '../../../UI/Cards/CardHeader/CardHeader';\r\n// import AdminLayout from '../AdminLayout/AdminLayout';\r\n// import Input from '../../../UI/Input/Input';\r\n// import FormikInput from '../../../UI/Input/FormikInput/FormikInput';\r\n// import SubmitButton from '../../../UI/Buttons/SubmitButton/SubmitButton';\r\n// import CancelButton from '../../../UI/Buttons/CancelButton/CancelButton';\r\n\r\n// import classes from './AdminCreateProjects.module.css';\r\n// import axios from 'axios';\r\n\r\n\r\n// const initialValues = {\r\n//     title: '',\r\n//     description: '',\r\n//     date: '',\r\n//     location: ''\r\n// };\r\n\r\n// const onSubmit = async (values) => {\r\n//     console.log('Form values', values);\r\n\r\n//     const {...data} = values;\r\n//     const res = await axios.post('/api/projects', data)\r\n//         .catch(err => {\r\n//             console.log('Error: ', err.res.data);\r\n//         });\r\n// };\r\n\r\n// // const validate = values => {\r\n// //     let errors ={};\r\n\r\n// //     if (!values.title) errors.title = \"Required\";\r\n// //     if (!values.description) errors.description = \"Required\";\r\n// //     if (!values.date) errors.date = \"Required\";\r\n// //     if (!values.location) errors.location = \"Required\";\r\n\r\n// //     return errors;\r\n// // }\r\n\r\n// const validationSchema = Yup.object({\r\n//     title: Yup.string().required('Required'),\r\n//     description: Yup.string().required('Required'),\r\n//     date: Yup.string().required('Required'),\r\n//     location: Yup.string().required('Required')\r\n// });\r\n\r\n// const AdminCreateProjects = ( props ) => {\r\n//     // const formik = useFormik({\r\n//     //     initialValues,\r\n//     //     onSubmit,\r\n//     //     validationSchema\r\n//     // });\r\n\r\n//     return (\r\n//         <AdminLayout>\r\n//             <div className={classes.AdminCreateProjectsHeader}>\r\n//                 <CardHeader>\r\n//                     <h2 className={classes.Text}>Projects</h2>\r\n//                 </CardHeader>\r\n//             </div>\r\n//             <div className={classes.AdminCreateProjectsContentDiv}>\r\n//                 <Formik\r\n//                     initialValues={initialValues}\r\n//                     validationSchema={validationSchema}\r\n//                     onSubmit={onSubmit}\r\n//                 >\r\n//                     <Form className={classes.AdminCreateProjectsForm}>\r\n//                         <div className={classes.AdminCreateProjectsFormDiv}>\r\n//                             <div className={classes.AdminCreateProjectsFormInput}>\r\n//                                 <label>Project Title</label>\r\n//                                 <FormikInput \r\n//                                     type=\"text\"\r\n//                                     placeholder=\"Project Title\"\r\n//                                     id=\"title\"\r\n//                                     name=\"title\"\r\n//                                 />\r\n//                                 <ErrorMessage name=\"title\">\r\n//                                     {\r\n//                                         errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n//                                     }\r\n//                                 </ErrorMessage>\r\n//                             </div>\r\n//                             <div className={classes.AdminCreateProjectsFormInput}>\r\n//                                 <label>Project Description</label>\r\n//                                 <FormikInput\r\n//                                     type=\"text\"\r\n//                                     placeholder=\"Project Description\"\r\n//                                     id=\"description\"\r\n//                                     name=\"description\"\r\n//                                 />\r\n//                                 <ErrorMessage name=\"description\">\r\n//                                     {\r\n//                                         errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n//                                     }\r\n//                                 </ErrorMessage>\r\n//                             </div>\r\n//                             <div className={classes.AdminCreateProjectsFormInput}>\r\n//                                 <label>When</label>\r\n//                                 <FormikInput \r\n//                                     type=\"text\"\r\n//                                     placeholder=\"Date\"\r\n//                                     id=\"date\"\r\n//                                     name=\"date\"\r\n//                                 />\r\n//                                 <ErrorMessage name=\"date\">\r\n//                                     {\r\n//                                         errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n//                                     }\r\n//                                 </ErrorMessage>\r\n//                             </div>\r\n//                             <div className={classes.AdminCreateProjectsFormInput}>\r\n//                                 <label>Where</label>\r\n//                                 <FormikInput \r\n//                                     type=\"text\"\r\n//                                     placeholder=\"Location\"\r\n//                                     id=\"location\"\r\n//                                     name=\"location\"\r\n//                                 />\r\n//                                 <ErrorMessage name=\"location\">\r\n//                                     {\r\n//                                         errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n//                                     }\r\n//                                 </ErrorMessage>\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className={classes.ButtonDiv}>\r\n//                             <SubmitButton />\r\n//                             <CancelButton />\r\n//                         </div>\r\n//                     </Form>\r\n//                 </Formik>\r\n//             </div>\r\n            \r\n//         </AdminLayout>\r\n//     );\r\n// };\r\n\r\n// export default AdminCreateProjects;","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminReportsDashboard\\AdminReportsDashboard.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminLogin\\AdminLogin.js",["408","409","410","411"],"import React, { useState, useContext, useRef } from 'react';\r\nimport CardForm from '../../../UI/Cards/CardForm/CardForm';\r\nimport Input from '../../../UI/Input/Input';\r\nimport LoginButton from '../../../UI/Buttons/LoginButton/LoginButton';\r\nimport { loginCall } from '../../../../api_calls/adminApiCall';\r\nimport { Context } from '../../../../context/Context';\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\nimport classes from './AdminLogin.module.css';\r\n\r\nconst AdminLogin = () => {\r\n    // const email = useRef();\r\n    // const password = useRef();\r\n    // const { user, isFetching, error, dispatch } = useContext(Context);\r\n\r\n    // const handleSubmit = (e) => {\r\n    //     e.preventDefault();\r\n    //     loginCall(\r\n    //         { email: email.current.value, password: password.current.value }, \r\n    //         dispatch\r\n    //     );\r\n    // };\r\n\r\n    // console.log(user);\r\n//KD's code\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const { aUser, dispatch, isFetching } = useContext(Context);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch({ type: \"ALOGIN_START\" });\r\n\r\n    try {\r\n        const res = await axios.post(\"/api/admin/login\", {\r\n            email,\r\n            password,\r\n        })\r\n\r\n        dispatch({ type: \"ALOGIN_SUCCESS\", payload: res.data });\r\n    } catch (err) {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: `${err.response.status}`,\r\n            text: `${err.response.data.message}`,\r\n        });\r\n        dispatch({ type: \"ALOGIN_FAILURE\" });\r\n    }\r\n  };\r\n\r\n\r\n    return (\r\n        // <div className={classes.Content}>\r\n        //     <form className={classes.CardForm} onSubmit={handleSubmit}>\r\n        //         <h3>SmartCTLogo</h3>\r\n        //         <input\r\n        //             className={classes.Input}\r\n        //             type=\"email\"\r\n        //             placeholder=\"Email address\"\r\n        //             ref={email}\r\n        //             id=\"email\"\r\n        //         />\r\n        //         <input\r\n        //             className={classes.Input}\r\n        //             type=\"password\"\r\n        //             placeholder=\"Password\"\r\n        //             ref={password}\r\n        //             id=\"password\"\r\n\r\n        //         />\r\n        //         <div className={classes.ButtonDiv}>\r\n        //             <LoginButton type=\"submit\"/>\r\n        //         </div>\r\n        //         <div className={classes.HyperlinkDiv}>\r\n        //             <a href=\"/forgot-password\" className={classes.Hyperlink}>\r\n        //             Forgot Password\r\n        //             </a>\r\n        //         </div>\r\n        //     </form>\r\n        // </div>\r\n        //KD's Code\r\n        <div className={classes.Content}>\r\n            <CardForm onSubmit = { handleSubmit }>\r\n                <h3>SmartCTLogo</h3>\r\n                <Input\r\n                    type=\"email\"\r\n                    placeholder=\"Email address\"\r\n                    onChange = {e => setEmail(e.target.value)} \r\n                    id=\"email\"\r\n                />\r\n                <Input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    onChange = {e => setPassword(e.target.value)} \r\n                    id=\"password\"\r\n\r\n                />\r\n                <div className={classes.ButtonDiv}>\r\n                    <LoginButton type=\"submit\"/>\r\n                </div>\r\n                <div className={classes.HyperlinkDiv}>\r\n                    <a href=\"/admin-forgot\" className={classes.Hyperlink}>\r\n                    Forgot Password\r\n                    </a>\r\n                </div>\r\n            </CardForm>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminLogin;","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminCreateProposals\\AdminCreateProposals.js",["412"],"import React, { useContext, useState } from 'react';\r\nimport * as ReactBootStrap from 'react-bootstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Redirect } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport AdminLayout from '../AdminLayout/AdminLayout';\r\nimport CardHeader from '../../../UI/Cards/CardHeader/CardHeader';\r\nimport SubmitButton from '../../../UI/Buttons/SubmitButton/SubmitButton';\r\nimport CancelButton from '../../../UI/Buttons/CancelButton/CancelButton';\r\nimport { Context } from '../../../../context/Context';\r\nimport classes from './AdminCreateProposals.module.css';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst AdminCreateProposals = () => {\r\n    const { aUser } = useContext(Context);\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [redirect, setRedirect] = useState(false);\r\n    const [loading, setLoading] =  useState(true);\r\n\r\n    const onSubmit = async (data) => {\r\n        const coverImage = '';\r\n\r\n        const createProposal = {\r\n            userName: data.userName,\r\n            title: data.title,\r\n            description: data.description,\r\n            location: data.location,\r\n            userType: aUser.data.user.userType,\r\n            coverImage,\r\n        };\r\n\r\n        setLoading(false);\r\n        const formData = new FormData();\r\n        const filename = Date.now() + data.coverImage[0].name;\r\n        formData.append('name', filename);\r\n        formData.append('file', data.coverImage[0]);\r\n        formData.append(\"upload_preset\", \"dev_prac\");\r\n        formData.append(\"cloud_name\", \"karlstorage\");\r\n\r\n        try {\r\n            const res = await axios.post(\"https://api.cloudinary.com/v1_1/karlstorage/image/upload\", formData);\r\n            createProposal.coverImage = res.data.secure_url;\r\n\r\n            try {\r\n                const res = await axios.post('/api/proposals/', createProposal);\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Proposal Created!',\r\n                    text: 'Your proposal is been posted . . .'\r\n                });\r\n\r\n                setLoading(true);\r\n                setRedirect(true);\r\n            } catch (err) {\r\n                console.log(err);\r\n                setLoading(true);\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log (err);\r\n            setLoading(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        { redirect && (<Redirect to = '/admin-proposals' />) }\r\n        {loading ? (\r\n        <AdminLayout>\r\n            <div className={classes.AdminCreateProposalsHeader}>\r\n                <CardHeader>\r\n                    <h2 className={classes.Text}>Proposals</h2>\r\n                </CardHeader>\r\n            </div>\r\n            <div className={classes.AdminCreateProposalsContentDiv}>\r\n                <form className={classes.AdminCreateProposalForm} onSubmit={handleSubmit(onSubmit)}>\r\n                    <div className={classes.AdminCreateProposalFormDiv}>\r\n                        <div className={classes.AdminCreateProposalsFormInput}>\r\n                            <label>Username</label>\r\n                            <input\r\n                                className={classes.Input}\r\n                                type='text'\r\n                                id='userName'\r\n                                name='userName'\r\n                                placeholder='Username'\r\n                                defaultValue={aUser.data.user.username}\r\n                                ref={register}\r\n                                readOnly\r\n                            />\r\n                        </div>\r\n                        <div className={classes.AdminCreateProposalsFormInput}>\r\n                            <label>Proposal Title</label>\r\n                            <input\r\n                                className={classes.Input}\r\n                                type='text'\r\n                                id='title'\r\n                                name='title'\r\n                                placeholder='Proposal Title'\r\n                                ref={register({ required: \"Required!\" })}\r\n                            />\r\n                            {errors.title && <p className={classes.InputValidation}>{errors.title.message}</p>}\r\n                        </div>\r\n                        <div className={classes.AdminCreateProposalsFormInput}>\r\n                            <label>Description</label>\r\n                            <input\r\n                                className={classes.Input}\r\n                                type='text'\r\n                                id='description'\r\n                                name='description'\r\n                                placeholder='Description'\r\n                                ref={register({ required: \"Required!\" })}\r\n                            />\r\n                            {errors.description && <p className={classes.InputValidation}>{errors.description.message}</p>}\r\n                        </div>\r\n                        <div className={classes.AdminCreateProposalsFormInput}>\r\n                            <label>Location</label>\r\n                            <input  \r\n                                className={classes.Input}\r\n                                type='text'\r\n                                id='location'\r\n                                name='location'\r\n                                placeholder='Location'\r\n                                ref={register({ required: \"Required!\" })}\r\n                            />\r\n                            {errors.location && <p className={classes.InputValidation}>{errors.location.message}</p>}\r\n                        </div>\r\n                        <div className={classes.AdminCreateProposalsFormInput}>\r\n                            <label>Image</label>\r\n                            <input\r\n                                type='file'\r\n                                id='coverImage'\r\n                                name='coverImage'\r\n                                placeholder='Insert Image'\r\n                                ref={register({ required: \"Required!\" })}\r\n                            />\r\n                            {errors.coverImage && <p className={classes.InputValidation}>{errors.coverImage.message}</p>}\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.ButtonDiv}>\r\n                        <SubmitButton />\r\n                        <CancelButton />\r\n                    </div>\r\n                </form>\r\n                <div className={classes.QuoteDiv}>\r\n                    <p className={classes.Quote}></p>\r\n                </div>\r\n            </div>\r\n            </AdminLayout>\r\n            ) : (\r\n                    <div style = {{\r\n                        color: '#777',\r\n                        textAlign: 'center',\r\n                    }}>\r\n                      <h2 style = {{marginTop: '10%'}}>Processing Please Wait</h2>\r\n                      <div>\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"primary\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"secondary\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"success\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"danger\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"warning\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"info\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"light\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"dark\" />\r\n                      </div>\r\n                    </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AdminCreateProposals;\r\n\r\n// const AdminCreateProposals = () => {\r\n//     const { aUser } = useContext(Context);\r\n//     const [ coverImage, setCoverImage ] = useState()\r\n\r\n//     const validationSchema = Yup.object({\r\n//         userName: Yup.string().required('Required!'),\r\n//         title: Yup.string().required('Required!'),\r\n//         description: Yup.string().required('Required!'),\r\n//         location: Yup.string().required('Required!')\r\n//     });\r\n\r\n//     const formik = useFormik({\r\n//         initialValues: {\r\n//             userName: aUser.user.username,\r\n//             title: '',\r\n//             description: '',\r\n//             location: '',\r\n//             coverImage: ''\r\n//         },\r\n//         onSubmit: values => {\r\n\r\n//             let data = new FormData();\r\n//             data.append('coverImage', values.coverImage);\r\n\r\n//             console.log('Form data', values);\r\n//             console.log({\r\n//                 fileName: values.file.name,\r\n//             });\r\n//         },\r\n//         validationSchema\r\n//     });\r\n\r\n//     const messageCap = '“When we succeed, we succeed because of our individual initiative, but also because we do things together.” -Barack Obama';\r\n\r\n\r\n//     return(\r\n        // <AdminLayout>\r\n        //     <div className={classes.AdminCreateProposalsHeader}>\r\n        //         <CardHeader>\r\n        //             <h2 className={classes.Text}>Proposals</h2>\r\n        //         </CardHeader>\r\n        //     </div>\r\n        //     <div className={classes.AdminCreateProposalsContentDiv}>\r\n        //         <form className={classes.AdminCreateProposalForm} onSubmit={formik.handleSubmit}>\r\n        //             <div className={classes.AdminCreateProposalFormDiv}>\r\n        //                 <div className={classes.AdminCreateProposalsFormInput}>\r\n        //                     <label>Username</label>\r\n        //                     <Input\r\n        //                         type='text'\r\n        //                         id='userName'\r\n        //                         name='userName'\r\n        //                         placeholder='Username'\r\n        //                         onChange={formik.handleChange}\r\n        //                         onBlur={formik.handleBlur}\r\n        //                         value={aUser.user.username}\r\n        //                     />\r\n        //                     { formik.touched.userName && formik.errors.userName ? (\r\n        //                         <div className={classes.InputValidation}>{formik.errors.userName}</div>\r\n        //                         ) : null }\r\n        //                 </div>\r\n        //                 <div className={classes.AdminCreateProposalsFormInput}>\r\n        //                     <label>Proposal Title</label>\r\n        //                     <Input\r\n        //                         type='text'\r\n        //                         id='title'\r\n        //                         name='title'\r\n        //                         placeholder='Proposal Title'\r\n        //                         onChange={formik.handleChange}\r\n        //                         onBlur={formik.handleBlur}\r\n        //                         value={formik.values.title}\r\n        //                     />\r\n        //                     { formik.touched.title && formik.errors.title ? (\r\n        //                         <div className={classes.InputValidation}>{formik.errors.title}</div>\r\n        //                         ) : null}\r\n        //                 </div>\r\n        //                 <div className={classes.AdminCreateProposalsFormInput}>\r\n        //                     <label>Description</label>\r\n        //                     <Input\r\n        //                         type='text'\r\n        //                         id='description'\r\n        //                         name='description'\r\n        //                         placeholder='Description'\r\n        //                         onChange={formik.handleChange}\r\n        //                         onBlur={formik.handleBlur}\r\n        //                         value={formik.values.description}\r\n        //                     />\r\n        //                     { formik.touched.description && formik.errors.description ? (\r\n        //                         <div className={classes.InputValidation}>{formik.errors.description}</div>\r\n        //                         ) : null}\r\n        //                 </div>\r\n        //                 <div className={classes.AdminCreateProposalsFormInput}>\r\n        //                     <label>Location</label>\r\n        //                     <Input\r\n        //                         type='text'\r\n        //                         id='location'\r\n        //                         name='location'\r\n        //                         placeholder='Location'\r\n        //                         onChange={formik.handleChange}\r\n        //                         onBlur={formik.handleBlur}\r\n        //                         value={formik.values.location}\r\n        //                     />\r\n        //                     { formik.touched.location && formik.errors.location ? (\r\n        //                         <div className={classes.InputValidation}>{formik.errors.location}</div>\r\n        //                         ) : null}\r\n        //                 </div>\r\n        //                 <div className={classes.AdminCreateProposalsFormInput}>\r\n        //                     <label>Location</label>\r\n        //                     <Input\r\n        //                         type='file'\r\n        //                         id='coverImage'\r\n        //                         name='coverImage'\r\n        //                         placeholder='Location'\r\n        //                         onChange={(event) => {\r\n        //                             setCoverImage('coverImage', event.currentTarget.files[0]);\r\n        //                         }}\r\n        //                         onBlur={formik.handleBlur}\r\n        //                         value={formik.values.coverImage}\r\n        //                     />\r\n        //                     {/* { formik.touched.location && formik.errors.location ? (\r\n        //                         <div className={classes.InputValidation}>{formik.errors.location}</div>\r\n        //                         ) : null} */}\r\n        //                 </div>\r\n        //             </div>\r\n        //             <div className={classes.ButtonDiv}>\r\n        //                 <SubmitButton />\r\n        //                 <CancelButton />\r\n        //             </div>\r\n        //         </form>\r\n        //         <div className={classes.QuoteDiv}>\r\n        //             <p className={classes.Quote}>{messageCap}</p>\r\n        //         </div>\r\n        //     </div>\r\n        //  </AdminLayout>\r\n//     );\r\n// }\r\n\r\n// export default AdminCreateProposals;\r\n\r\n// const AdminCreateProposals = () => {\r\n//     const { aUser } = useContext(Context);\r\n//     // const [userName, setUserName] = useState('');\r\n//     // const [title, setTitle] = useState('');\r\n//     // const [description, setDescription] = useState('');\r\n//     // const [location, setLocation] = useState('');\r\n//     // const [message, setMessage] = useState('');\r\n//     // const [coverImage, setCoverImage] = useState(null);\r\n\r\n//     // const onChangeFile = e => {\r\n//     //     setCoverImage(e.target.files[0]);\r\n//     // }\r\n\r\n//     // const changeOnClick = (e) => {\r\n//     //     e.preventDefault();\r\n\r\n//     //     const formData = new FormData();\r\n//     //     formData.append('userName', userName);\r\n//     //     formData.append('title', title);\r\n//     //     formData.append('description', description);\r\n//     //     formData.append('location', location);\r\n//     //     formData.append('coverImage', coverImage);\r\n\r\n//     //     setUserName('');\r\n//     //     setTitle('');\r\n//     //     setDescription('');\r\n//     //     setLocation('');\r\n        \r\n//     //     console.log(formData);\r\n//     // }\r\n\r\n//     const validationSchema = Yup.object({\r\n//         userName: Yup.string().required('Required!'),\r\n//         title: Yup.string().required('Required!'),\r\n//         description: Yup.string().required('Required!'),\r\n//         location: Yup.string().required('Required!')\r\n//     });\r\n\r\n//     const formik = useFormik({\r\n//         initialValues: {\r\n//             userName: aUser.user.username,\r\n//             title: '',\r\n//             description: '',\r\n//             location: '',\r\n//             coverImage: '',\r\n//         },\r\n//         onSubmit: values => {\r\n//             //const formData = new FormData();\r\n//             //formData.append('coverImage', coverImage);\r\n//             axios.post('/api/proposals', values);\r\n//             console.log(values);\r\n//             //console.log(formData)\r\n//             //const formData = await new FormData();\r\n\r\n//             // formData.append('userName', values.userName);\r\n//             // formData.append('title', title);\r\n//             // formData.append('description', description);\r\n//             // formData.append('location', location);\r\n\r\n//             // setUserName('');\r\n//             // setTitle('');\r\n//             // setDescription('');\r\n//             // setLocation('');\r\n\r\n//             // axios.post('/api/proposals', formData)\r\n//             //     .then((res) => setMessage(res.data))\r\n//             //     .catch((err) => {\r\n//             //         console.log(err);\r\n//             // });\r\n//             // console.log(userName);\r\n//         },\r\n//         validationSchema\r\n//     });\r\n\r\n//     const messageCap = '“When we succeed, we succeed because of our individual initiative, but also because we do things together.” -Barack Obama';\r\n\r\n//     //console.log(aUser.user.username);\r\n//     //console.log('Form values', formik.values); \r\n\r\n//     return(\r\n//         <AdminLayout>\r\n//             <div className={classes.AdminCreateProposalsHeader}>\r\n//                 <CardHeader>\r\n//                     <h2 className={classes.Text}>Proposals</h2>\r\n//                 </CardHeader>\r\n//             </div>\r\n//             <div className={classes.AdminCreateProposalsContentDiv}>\r\n//                 <form className={classes.AdminCreateProposalForm} onSubmit={formik.onSubmit}>\r\n//                     <div className={classes.AdminCreateProposalFormDiv}>\r\n//                         <div className={classes.AdminCreateProposalsFormInput}>\r\n//                             <label>Username</label>\r\n//                             <Input\r\n//                                 className={classes.Input}\r\n//                                 type='text'\r\n//                                 id='userName'\r\n//                                 name='userName'\r\n//                                 placeholder='Username'\r\n//                                 //onChange={(e) => setUserName(e.target.value)}\r\n//                                 onChange={formik.handleChange}\r\n//                                 onBlur={formik.handleBlur}\r\n//                                 value={aUser.user.username}\r\n//                             />\r\n//                             { formik.touched.userName && formik.errors.userName ? (\r\n//                                 <div className={classes.InputValidation}>{formik.errors.userName}</div>\r\n//                                 ) : null }\r\n//                         </div>\r\n//                         <div className={classes.AdminCreateProposalsFormInput}>\r\n//                             <label>Proposal Title</label>\r\n//                             <Input\r\n//                                 type='text'\r\n//                                 id='title'\r\n//                                 name='title'\r\n//                                 placeholder='Proposal Title'\r\n//                                 //onChange={(e) => setTitle(e.target.value)}\r\n//                                 onChange={formik.handleChange}\r\n//                                 onBlur={formik.handleBlur}\r\n//                                 value={formik.values.title}\r\n//                             />\r\n//                             {/* { formik.touched.title && formik.errors.title ? (\r\n//                                 <div className={classes.InputValidation}>{formik.errors.title}</div>\r\n//                                 ) : null} */}\r\n//                         </div>\r\n//                         <div className={classes.AdminCreateProposalsFormInput}>\r\n//                             <label>Description</label>\r\n//                             <Input\r\n//                                 type='text'\r\n//                                 id='description'\r\n//                                 name='description'\r\n//                                 placeholder='Description'\r\n//                                 // onChange={(e) => setDescription(e.target.value)}\r\n//                                 onChange={formik.handleChange}\r\n//                                 onBlur={formik.handleBlur}\r\n//                                 value={formik.values.description}\r\n//                             />\r\n//                             {/* { formik.touched.description && formik.errors.description ? (\r\n//                                 <div className={classes.InputValidation}>{formik.errors.description}</div>\r\n//                                 ) : null} */}\r\n//                         </div>\r\n//                         <div className={classes.AdminCreateProposalsFormInput}>\r\n//                             <label>Location</label>\r\n//                             <Input\r\n//                                 type='text'\r\n//                                 id='location'\r\n//                                 name='location'\r\n//                                 placeholder='Location'\r\n//                                 // onChange={(e) => setLocation(e.target.value)}\r\n//                                 onChange={formik.handleChange}\r\n//                                 onBlur={formik.handleBlur}\r\n//                                 value={formik.values.location}\r\n//                             />\r\n//                             {/* { formik.touched.location && formik.errors.location ? (\r\n//                                 <div className={classes.InputValidation}>{formik.errors.location}</div>\r\n//                                 ) : null} */}\r\n//                         </div>\r\n//                         {/* <div className={classes.AdminCreateProposalsFormInput}>\r\n//                             <label>Proposal Image</label>\r\n//                             <Input\r\n//                                 type='file'\r\n//                                 id='coverImage'\r\n//                                 name='coverImage'\r\n//                                 placeholder='Insert Photo'\r\n//                                 onChange={onChangeFile}\r\n//                                 // onChange={e => {\r\n//                                 //     formik.handleChange;\r\n//                                 //     setFilename('coverImage', e.target.files[0]);\r\n//                                 // }}\r\n//                                 // value={formik.values.coverImage}\r\n//                             />\r\n//                             { formik.touched.coverImage && formik.errors.coverImage ? (\r\n//                                 <div className={classes.InputValidation}>{formik.errors.coverImage}</div>\r\n//                                 ) : null}\r\n//                         </div> */}\r\n//                     </div>\r\n//                     <div className={classes.ButtonDiv}>\r\n//                         <SubmitButton />\r\n//                         <CancelButton />\r\n//                     </div>\r\n//                 </form>\r\n//                 <div className={classes.QuoteDiv}>\r\n//                     <p className={classes.Quote}>{messageCap}</p>\r\n//                 </div>\r\n//             </div>\r\n//         </AdminLayout>\r\n//     );\r\n// }\r\n\r\n// export default AdminCreateProposals;\r\n","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminReports\\AdminReports.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminProjects\\AdminProjects.js",["413"],"import React, { useEffect, useState, useParams } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { format } from 'timeago.js';\r\n\r\nimport CardHeader from '../../../UI/Cards/CardHeader/CardHeader';\r\nimport Tables from '../../../UI/Tables/Tables';\r\nimport AdminLayout from '../AdminLayout/AdminLayout';\r\n\r\nimport classes from './AdminProjects.module.css';\r\n\r\nconst AdminProjects = ( props ) => {\r\n    const [projects, setProjects] = useState();    \r\n    // const { handle } = useParams();\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            const response = await fetch('/api/projects');\r\n            const responseData = await response.json();\r\n            setProjects(responseData.data.projects);\r\n        };\r\n        sendRequest();\r\n    }, []);\r\n\r\n    //const string = 'watch?v=S_mgSHCWCmA';\r\n    console.log(projects);\r\n    return (\r\n        <React.Fragment>\r\n            <AdminLayout>\r\n                <div className={classes.AdminProjects}>\r\n                    <CardHeader>\r\n                        <h2 className={classes.Text}>Projects</h2>\r\n                    </CardHeader>\r\n                </div>\r\n                <Tables>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Project ID</th>\r\n                            <th>Project Title</th>\r\n                            <th>Location</th>\r\n                            <th>Status</th>\r\n                            <th>Created at</th>\r\n                            <th>Updated at</th>\r\n                            <th>Link</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {projects && projects.map(project => (\r\n                        <tr key={project._id}>\r\n                            <td>{project._id}</td>\r\n                            <td>{project.title}</td>\r\n                            <td>{project.location}</td>\r\n                            <td>{project.status}</td>\r\n                            <td>{format(project.createdAt)}</td>\r\n                            <td>{format(project.updatedAt)}</td>\r\n                            <td>\r\n                                <Link to={'/admin-project/' + project._id}>Click here</Link>\r\n                            </td>\r\n                        </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Tables>\r\n                <div className={classes.ButtonDiv}>\r\n                    <Link to='/admin-create-projects'>\r\n                        <button className={classes.Button}>Create Projects</button>\r\n                    </Link>\r\n                </div>\r\n            </AdminLayout>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default AdminProjects;","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminProposalsDashboard\\AdminProposalsDashboard.js",["414"],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios'\r\n\r\nimport AdminLayout from '../AdminLayout/AdminLayout';\r\nimport CardHeader from '../../../UI/Cards/CardHeader/CardHeader';\r\nimport CardSummary from '../../../UI/Cards/CardDashboard/CardSummary';\r\n\r\nimport classes from './AdminProposalsDashboard.module.css';\r\nimport Tables from '../../../UI/Tables/Tables';\r\n\r\nconst AdminProposalsDashboard = () => {\r\n    const [topProposals, setTopProposals] = useState([]);\r\n    const [accepted, setAccepted] = useState([]);\r\n    const [rejected, setRejected] = useState([]);\r\n    let rCount = 0;\r\n    \r\n    useEffect(() => {\r\n        const fetchTopProposals = async () => {\r\n            const res = await axios.get('/api/proposals/topProposals');\r\n            setTopProposals(res.data);\r\n        }\r\n\r\n        fetchTopProposals();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        \r\n        const fetchApproved = async () => {\r\n            const res = await axios.get('/api/proposals/approved');\r\n            let count = 0\r\n            \r\n            res.data.forEach(() => {\r\n            count += 1;\r\n            })\r\n\r\n            setAccepted(count);\r\n        }\r\n\r\n        fetchApproved();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchRejected = async () => {\r\n            const res = await axios.get('/api/proposals/rejected');\r\n            let count = 0\r\n            \r\n            res.data.forEach(() => {\r\n            count += 1;\r\n            })\r\n\r\n            setRejected(count);\r\n        }\r\n\r\n        fetchRejected();\r\n    }, []);\r\n\r\n    console.log(topProposals);\r\n    console.log(accepted);\r\n    console.log(rejected);\r\n\r\n    \r\n    return (\r\n        <AdminLayout>\r\n            <div className={classes.AdminProposalsDashboard}>\r\n                <CardHeader>\r\n                <h2 className={classes.Text}>Proposals Summary</h2>\r\n                </CardHeader>\r\n            </div>\r\n            <div className={classes.LeaderboardsHeader}>\r\n                <h3>Leaderboards</h3>\r\n            </div>\r\n            <div className={classes.Divider}>\r\n                <div className={classes.TableDiv}>\r\n                    <table className={classes.Table}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Rank</th>\r\n                                <th>Proposal ID</th>\r\n                                <th>Proposal Title</th>\r\n                                <th>Upvote</th>\r\n                                <th>Downvote</th>\r\n                                <th>Percentage</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {topProposals.map((p) => (\r\n                                <tr key = {p._id}>\r\n                                    <td>{++rCount}</td>\r\n                                    <td>{p._id}</td>\r\n                                    <td>{p.title}</td>\r\n                                    <td>{p.upvote.length}</td>\r\n                                    <td>{p.downvote.length}</td>\r\n                                    <td>{Math.trunc(((p.upvote.length - p.downvote.length) / (p.upvote.length + p.downvote.length)) * 100)}%</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className={classes.CardData}>\r\n                    <CardSummary>\r\n                        <h4 className={classes.SummaryCardHeader}>Approved Proposals</h4>\r\n                        <p className={classes.SummaryDataText}>{accepted}</p>\r\n                    </CardSummary>\r\n                    <CardSummary>\r\n                        <h4 className={classes.SummaryCardHeader}>Rejected Proposals</h4>\r\n                        <p className={classes.SummaryDataText}>{rejected}</p>\r\n                    </CardSummary>\r\n                </div>\r\n            </div>\r\n        </AdminLayout>\r\n    );\r\n};\r\n\r\nexport default AdminProposalsDashboard;","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\SingleUsers\\SingleUsers.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminEachProject\\AdminEachProject.js",["415","416","417","418"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useParams, Link, Redirect } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport CardHeader from \"../../../UI/Cards/CardHeader/CardHeader\";\r\nimport AdminLayout from \"../AdminLayout/AdminLayout\";\r\nimport classes from \"./AdminEachProject.module.css\";\r\nimport { Context } from \"../../../../context/Context\";\r\n\r\nconst AdminEachProject = () => {\r\n  const [currentProject, setCurrentProject] = useState([]);\r\n  const [disable, setDisable] = useState(false);\r\n  const { aUser } = useContext(Context);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    const findProject = async () => {\r\n      const response = await fetch('/api/projects/' + params.id);\r\n      const responseData = await response.json();\r\n      //console.log(responseData);\r\n      setCurrentProject(responseData.data.project);\r\n    }\r\n    findProject();\r\n  }, []);\r\n\r\n  const accomplished = async () => {\r\n    axios.put('/api/projects/update-projects/' + params.id, {\r\n      status: 'Accomplished',\r\n      userType: aUser.data.user.userType,\r\n      username: aUser.data.user.username\r\n    });\r\n    setRedirect(true);\r\n  };\r\n\r\n  const ongoing = async () => {\r\n    axios.put('/api/projects/update-projects/' + params.id, {\r\n      status: 'Ongoing',\r\n      userType: aUser.data.user.userType,\r\n      username: aUser.data.user.username\r\n    });\r\n    setRedirect(true);\r\n  };\r\n  \r\n  return (\r\n    <>\r\n    { redirect && (<Redirect to = '/admin-projects' />) }\r\n    <AdminLayout>\r\n      <div className={classes.AdminEachProject}>\r\n        <CardHeader>\r\n          <h2 className={classes.Text}>Projects</h2>\r\n        </CardHeader>\r\n      </div>\r\n      <div className={classes.ProjectDiv}>\r\n        <h3 className={classes.TitleText}>{currentProject.title}</h3>\r\n        <div className={classes.ProjectInfo}>\r\n          <div className={classes.DescriptionContainer}>\r\n            <p className={classes.ParagraphText}>\r\n             {currentProject.description}\r\n            </p>\r\n          </div>\r\n          <div className={classes.Gallery}>\r\n            <img src={currentProject.coverImage} className={classes.Image} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={classes.ButtonDiv}>\r\n          <button className={classes.Button} onClick={ongoing}>Ongoing</button>\r\n          <button className={classes.Button} onClick={accomplished}>Accomplished</button>\r\n          <Link to={'/admin-update-project/' + params.id}>\r\n            <button className={classes.Button}>Update</button>\r\n          </Link>\r\n      </div>\r\n    </AdminLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminEachProject;\r\n","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\SingleApplicants\\SingleApplicants.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminEachReport\\AdminEachReport.js",["419","420","421","422","423"],"import axios from \"axios\";\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { useParams, Redirect } from \"react-router-dom\";\r\nimport CardHeader from \"../../../UI/Cards/CardHeader/CardHeader\";\r\nimport AdminLayout from \"../AdminLayout/AdminLayout\";\r\nimport classes from \"./AdminEachReport.module.css\";\r\nimport { Context } from \"../../../../context/Context\";\r\n\r\nconst AdminEachReport = () => {\r\n  const [currentReport, setCurrentReport] = useState([]);\r\n  const params = useParams();\r\n  const { aUser } = useContext(Context);\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const findReport = async () => {\r\n      const response = await fetch('/api/reports/' + params.id);\r\n      const responseData = await response.json();\r\n \r\n      setCurrentReport(responseData.data.report);\r\n    }\r\n    findReport();\r\n  }, []);\r\n\r\n  const confirmReport = async () => {\r\n    const res = await axios.patch('/api/reports/' + params.id, {\r\n      status: 'Confirmed',\r\n      userType: aUser.data.user.userType,\r\n      username: aUser.data.user.username\r\n    });\r\n    setRedirect(true);\r\n  };\r\n\r\n  const cancelReport = async () => {\r\n    const res = await axios.patch('/api/reports/' + params.id, {\r\n      status: 'Cancelled',\r\n      userType: aUser.data.user.userType,\r\n      username: aUser.data.user.username\r\n    });\r\n    setRedirect(true);\r\n  }\r\n\r\n  const resolveReport = async () => {\r\n    const res = await axios.patch('/api/reports/' + params.id, {\r\n      status: 'Resolved',\r\n      userType: aUser.data.user.userType,\r\n      username: aUser.data.user.username\r\n    });\r\n    setRedirect(true);\r\n  }\r\n\r\n  const deleteReport = async () => {\r\n    const admin = {\r\n      username: aUser.data.user.username,\r\n      userType: aUser.data.user.userType\r\n    }\r\n    const res = await axios.delete('/api/reports/' + params.id, {data: admin});\r\n    window.location.replace('/admin-reports');\r\n  }\r\n\r\n  //console.log(currentReport);\r\n  return (\r\n    <AdminLayout>\r\n      { redirect && (<Redirect to = '/admin-reports' />) }\r\n      <div className={classes.AdminEachReport}>\r\n        <CardHeader>\r\n          <h2 className={classes.Text}>Reports</h2>\r\n        </CardHeader>\r\n      </div>\r\n      <div className={classes.ReportDiv}>\r\n        <h3 className={classes.TitleText}>{currentReport.title}</h3>\r\n        <div className={classes.ReportInfo}>\r\n          <div className={classes.DescriptionContainer}>\r\n            <p className={classes.ParagraphText}>\r\n              {currentReport.description}\r\n            </p>\r\n          </div>\r\n          <p>Image Source</p>\r\n        </div>\r\n        <div className={classes.Gallery}>\r\n            <h5>Image Placeholder</h5>\r\n        </div>\r\n      </div>\r\n      <div className={classes.ButtonDiv}>\r\n          <button className={classes.Button} onClick={confirmReport}>Confirm</button>\r\n          <button className={classes.Button} onClick={cancelReport}>Cancel</button>\r\n          <button className={classes.Button} onClick={resolveReport}>Resolved</button>\r\n          <button className={classes.Button} onClick={deleteReport}>Delete</button>\r\n      </div>\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminEachReport;\r\n","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminMessages\\AdminMessages.js",["424"],"import React, { useContext, useEffect, useReducer, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { io } from 'socket.io-client';\r\n\r\nimport CardHeader from '../../../UI/Cards/CardHeader/CardHeader';\r\nimport AdminLayout from '../AdminLayout/AdminLayout';\r\nimport AdminConversations from './AdminConversations/AdminConversations';\r\nimport AdminMessage from './AdminMessage/AdminMessage';\r\nimport { Context } from '../../../../context/Context';\r\n\r\nimport classes from './AdminMessages.module.css';\r\n\r\nconst AdminMessages = ( props ) => {\r\n    const [conversations, setConversations] = useState([]);\r\n    const [currentChat, setCurrentChat] = useState(null);\r\n    const [chatMessages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const [arrivalMessage, setArrivalMessage] = useState(null);\r\n    const socket = useRef();\r\n    const { aUser } = useContext(Context);\r\n    const scrollRef = useRef();\r\n\r\n    useEffect(() => {\r\n        socket.current = io(\"ws://localhost:8800\");\r\n        socket.current.on(\"getMessage\", data => {\r\n            setArrivalMessage({\r\n                sender: data.senderId,\r\n                text: data.text,\r\n                createdAt: Date.now()\r\n            }); \r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        arrivalMessage && currentChat?.members.includes(arrivalMessage.sender) &&\r\n        setMessages(prev => [...prev, arrivalMessage])\r\n    }, [arrivalMessage, currentChat]);\r\n\r\n    useEffect(() => {\r\n        socket.current.emit(\"addUser\", aUser.data.user._id);\r\n        socket.current.on(\"getUsers\", aUser => {\r\n            console.log(aUser);\r\n        });\r\n    }, [aUser]);\r\n    // insert this code soon:\r\n    // const { user } = useContext(Context)\r\n\r\n    useEffect(() => {\r\n        const getConversations = async () => {\r\n            try {\r\n                const res = await axios.get(\"/api/conversations/\" + aUser.data?.user?._id);\r\n                setConversations(res.data);\r\n                //console.log(res);\r\n            } catch(err) {\r\n                console.log(err);\r\n            }\r\n        };\r\n\r\n        getConversations();\r\n    }, [aUser.data.user._id]);\r\n\r\n    useEffect(() => {\r\n        const getMessages = async () => {\r\n            try {\r\n                const res = await axios.get(\"/api/messages/\" + currentChat?._id);\r\n                setMessages(res.data);\r\n                //console.log(res);\r\n            } catch(err) {\r\n                console.log(err);\r\n            }\r\n        };\r\n        getMessages();\r\n    }, [currentChat]);\r\n\r\n    // console.log(currentChat);\r\n   \r\n    // console.log(aUser.data.user._id);\r\n   const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const message = {\r\n            sender: aUser.data.user._id,\r\n            text: newMessage,\r\n            conversationId: currentChat._id\r\n        };\r\n\r\n        const receiverId = currentChat.members.find(member => member !== aUser.data.user._id);\r\n        \r\n        socket.current.emit(\"sendMessage\", {\r\n            senderId: aUser.data.user._id,\r\n            receiverId,\r\n            text: newMessage\r\n        });\r\n\r\n        console.log(receiverId);\r\n\r\n        try {\r\n            const res = await axios.post(\"/api/messages/\", message);\r\n            setMessages([...chatMessages, res.data]);\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n\r\n        Array.from(document.querySelectorAll(\"textarea\")).forEach(\r\n            input => (input.value = \"\"),\r\n            setNewMessage(''),\r\n        );\r\n    };\r\n\r\n    // useEffect(() => {\r\n        \r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        scrollRef.current?.scrollIntoView({\r\n            behavior: \"smooth\"\r\n        });\r\n    }, [chatMessages])\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <AdminLayout>\r\n                <div className={classes.AdminMessages}>\r\n                    <CardHeader>\r\n                        <h2 className={classes.Text}>Messages</h2>\r\n                    </CardHeader>\r\n                </div>\r\n                <div className={classes.Messenger}>\r\n                    <div className={classes.AdminChatMenu}>\r\n                        <input\r\n                            placeholder=\"Search messages\"\r\n                            className={classes.AdminChatMenuSearch}\r\n                        />\r\n                        {\r\n                            conversations.map(c => (\r\n                                <div onClick={() => setCurrentChat(c)}>\r\n                                    <AdminConversations conversation={c} currentUser={aUser.data?.user}  />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        {/* <AdminConversations /> */}\r\n                    </div>\r\n                    <div className={classes.AdminChat}>\r\n                        <div className={classes.AdminChatWrapper}>\r\n                            {\r\n                                <>\r\n                                    <div className={classes.AdminChatBoxTop}>\r\n                                        {chatMessages.map(m => (\r\n                                            <div ref={scrollRef}>\r\n                                                <AdminMessage messages={m} own={m.sender === aUser.data.user?._id} />\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                    <div className={classes.AdminChatBoxBottom}>\r\n                                        <textarea\r\n                                            className={classes.ChatMessageInput}\r\n                                            placeholder=\"Write something...\"\r\n                                            onChange={(e) => setNewMessage(e.target.value)}\r\n                                            value={newMessage}\r\n                                        ></textarea>\r\n                                        <button className={classes.ChatSubmitButton} onClick={handleSubmit}>Send</button>\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </AdminLayout>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default AdminMessages;","D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminEachProposal\\AdminEachProposal.js",["425","426","427","428"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useForm } from 'react-hook-form';\r\nimport { Redirect } from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport SubmitButton from \"../../../UI/Buttons/SubmitButton/SubmitButton\";\r\nimport CardHeader from \"../../../UI/Cards/CardHeader/CardHeader\";\r\nimport AdminLayout from \"../AdminLayout/AdminLayout\";\r\nimport { Context } from '../../../../context/Context';\r\nimport classes from \"./AdminEachProposal.module.css\";\r\n\r\n\r\nconst AdminEachProposal = () => {\r\n  const [currentProposal, setCurrentProposal] = useState([]);\r\n  const [comments, setComments] = useState();\r\n  const [redirect, setRedirect] = useState(false)\r\n  const { aUser } = useContext(Context);\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  const params = useParams();\r\n  \r\n  //console.log(aUser.data.user.username);\r\n  \r\n  useEffect(() => {\r\n    const findProposal = async () => {\r\n      const response = await fetch('/api/proposals/' + params.id);\r\n      const responseData = await response.json();\r\n\r\n      setCurrentProposal(responseData.data.proposal);\r\n      setComments(responseData.data.proposal.comments);\r\n    }\r\n    findProposal();\r\n  }, []);\r\n\r\n  //console.log(currentProposal);\r\n  //console.log(comments);\r\n  \r\n  const approveProposal = () => {\r\n    axios.put('/api/proposals/' + params.id, {\r\n      status: 'Approved',\r\n      userType: aUser.data.user.userType,\r\n      username: aUser.data.user.username\r\n    });\r\n\r\n    setRedirect(true);\r\n  };\r\n\r\n  const rejectProposal = () => {\r\n    axios.put('/api/proposals/' + params.id, {\r\n      status: 'Rejected',\r\n      userType: aUser.data.user.userType,\r\n      username: aUser.data.user.username\r\n    });\r\n\r\n    setRedirect(true);\r\n  };\r\n\r\n  const deleteProposal = () => {\r\n    const admin = {\r\n      username: aUser.data.user.username,\r\n      usertype: aUser.data.user.userType\r\n    }\r\n\r\n    axios.delete('/api/proposals/' + params.id, {data: admin});\r\n\r\n    window.location.replace('/admin-proposals');\r\n  };\r\n\r\n  const upVoteProposal = () => {\r\n    axios.patch('/api/proposals/upVote/' + params.id);\r\n    console.log('Upvote');\r\n  }\r\n\r\n  const downVoteProposals = () => {\r\n    axios.patch('/api/proposals/downVote/' + params.id);\r\n    console.log('Downvote');\r\n  }\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    \r\n    const values = {\r\n      user: aUser.data.user.username,\r\n      message: data.comment\r\n    }\r\n\r\n    console.log(values)\r\n\r\n    const res = await axios.patch(`/api/proposals/comments/${currentProposal._id}`, values)\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n      //setComments(responseData.data.proposal.comments);\r\n      //console.log(values);\r\n      window.location.reload(false);\r\n  }\r\n  //console.log(currentProposal.coverImage);\r\n\r\n  return (\r\n    <AdminLayout>\r\n      { redirect && (<Redirect to = '/admin-proposals' />) }\r\n      <div className={classes.AdminEachProposals}>\r\n        <CardHeader>\r\n          <h2 className={classes.Text}>Proposals</h2>\r\n        </CardHeader>\r\n      </div>\r\n      <div className={classes.ProposalDiv}>\r\n        <h3 className={classes.TitleText}>{currentProposal.title}</h3>\r\n        <div className={classes.ProposalInfo}>\r\n          <div className={classes.DescriptionContainer}>\r\n            <p className={classes.ParagraphText}>\r\n              {currentProposal.description}\r\n            </p>\r\n          </div>\r\n          <div className={classes.Gallery}>\r\n            <img src={currentProposal.coverImage} className={classes.Image} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={classes.VoteDiv}>\r\n        <button className={classes.VoteButton} onClick={upVoteProposal}>Upvote</button>\r\n        <button className={classes.VoteButton} onClick={downVoteProposals}>Downvote</button>\r\n      </div>\r\n      <div className={classes.ButtonDiv}>\r\n          <button className={classes.Button} onClick={approveProposal}>Approve</button>\r\n          <button className={classes.Button} onClick={rejectProposal}>Reject</button>\r\n          <button className={classes.Button} onClick={deleteProposal}>Delete</button>\r\n      </div>\r\n      <div className={classes.AdminCommentFormDivContainer}>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div className={classes.AdminCommentProposalFormDiv}>\r\n            <input\r\n              className={classes.Input}\r\n              type='text'\r\n              id='comment'\r\n              name='comment'\r\n              placeholder='Comment your thoughts...'\r\n              ref={register({ maxLength: 500 })}\r\n              />\r\n              {errors.comment && <p className={classes.InputValidation}>500 characters only</p>}\r\n            \r\n            <div className={classes.ButtonContainer}>\r\n              <SubmitButton />\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {\r\n        comments && comments.map(comment => (\r\n          <div className={classes.AdminViewProposalComment} key={comment._id}>\r\n            <div className={classes.AdminViewProposalCommentDivImg}>\r\n              <img src='https://imgur.com/urZfDtd.png'/>\r\n            </div>\r\n            <div className={classes.AdminViewProposalCommentBody}>\r\n              <div>{comment.user}</div>\r\n              <div>{comment.message}</div>\r\n            </div>\r\n          </div>\r\n        ))\r\n      }\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default AdminEachProposal;\r\n","D:\\Projects\\SmartCTzen\\client\\src\\components\\Citizen\\CitizenNav\\CitizenNav.jsx",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\Citizen\\ReportsNav\\ReportsNav.jsx",["429","430"],"import React from \"react\";\r\nimport { Link , withRouter} from \"react-router-dom\";\r\nimport './ReportsNav.css';\r\nimport { Nav } from \"react-bootstrap\";\r\n\r\nconst ReportsNav =() => (\r\n    <nav className=\"navbar navbar-expand-lg reportNavbar-mainbg\">\r\n        <button \r\n          className=\"navbar-toggler\"\r\n          type=\"button\" data-toggle=\"dropdown\" data-target=\"#reportNavbarSupportedContent\" aria-controls=\"reportNavbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <i className=\"fas fa-bars\"></i>\r\n        </button>\r\n        <ul className=\"navbar-nav m-auto\">\r\n            <li className=\"reportnav-item\">\r\n                All\r\n            </li>\r\n            <li className=\"reportnav-item\">\r\n                Confirmed\r\n            </li>\r\n            <li className=\"reportnav-item\">\r\n                Cancelled\r\n            </li>\r\n            <li className=\"reportnav-item\">\r\n                Resolved\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default withRouter(ReportsNav);","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProfile\\CitizenPassUpdate\\CitizenPassUpdate.jsx",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\Citizen\\ProposalNav\\ProposalNav.jsx",["431","432"],"import React from \"react\";\r\nimport { Link , withRouter} from \"react-router-dom\";\r\nimport './ProposalNav.css';\r\nimport { Nav } from \"react-bootstrap\";\r\n\r\nconst ProposalNav =() => (\r\n    <nav className=\"navbar navbar-expand-lg proposalNavbar-mainbg\">\r\n        <ul className=\"navbar-nav m-auto\">\r\n            <li className=\"proposalnav-item\">\r\n                All\r\n            </li>\r\n            <li className=\"proposalnav-item\">\r\n                Approved\r\n            </li>\r\n            <li className=\"proposalnav-item\">\r\n                Rejected\r\n            </li>\r\n            <li className=\"proposalnav-item\">\r\n                My Proposals\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default withRouter(ProposalNav);","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProjects\\CitizenViewProject\\CitizenViewProject.jsx",["433","434","435","436","437","438"],"import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport { Row, Col, Button, Container } from 'react-bootstrap';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport './CitizenViewProject.css';\r\n\r\nconst CitizenViewProject = () => {\r\n    const location = useLocation();\r\n    const path = location.pathname.split(\"/\")[2];\r\n    const [project, setProject] = useState([]);\r\n    const [viewCount, setViewCount] = useState();\r\n    const projectId = localStorage.getItem('projectid');\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            const response = await fetch(`/api/projects/${path}`);\r\n            const responseData = await response.json();\r\n            setProject(responseData.data.project);\r\n        };\r\n        sendRequest();\r\n    },[]);\r\n\r\n    const date = new Date(project.createdAt).toLocaleDateString()\r\n\r\n    console.log(project)\r\n\r\n    // console.log(viewCount)\r\n    return(\r\n        <Container className='citizenViewProject-container'>\r\n                <Row className='citizenViewProject-long'>\r\n                    <Col className='citizenViewProject-title'>\r\n                        <h1>{project.title}</h1>\r\n\r\n                        <i className=\"fas fa-eye\"/> <span>{project.viewCount}</span>\r\n                    </Col>\r\n\r\n                    <Col className='citizenViewProject-description'>\r\n                        <p>{project.description}</p>\r\n                    </Col> \r\n\r\n                    <Col className='citizenViewProject-img-frame'>\r\n                        <img src={project.coverImage}  className='citizenViewProject-img' alt='Project'/>\r\n                    </Col>\r\n\r\n                    <Col className='citizenViewProject-status'>\r\n                        <p>Date created: {date}</p>\r\n                        <p>Where: {project.location}</p>\r\n                        <p>Status: {project.status}</p>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Link className = 'citizen-backButton' to = '/citizen-projects'>\r\n                    Back\r\n                </Link>\r\n        </Container>\r\n    );\r\n};\r\nexport default CitizenViewProject;","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProjects\\CitizenProjects.jsx",["439","440","441","442","443","444"],"import \"./CitizenProjects.css\";\r\nimport React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport { Col, Column, Row, Container } from 'react-bootstrap'\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nconst CitizenProjects = () => {\r\n    const [projects, setProjects] = useState();\r\n    const [views, setViews] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            const response = await fetch('/api/projects');\r\n            const responseData = await response.json();\r\n            setProjects(responseData.data.projects);\r\n        };\r\n        sendRequest();\r\n    },[]);\r\n\r\n    const categoryAll = async () => {\r\n        const response = await fetch('/api/projects');\r\n        const responseData = await response.json();\r\n        // console.log(responseData)\r\n        setProjects(responseData.data.projects);\r\n    }\r\n    \r\n    const categoryAccomplished = async () => {\r\n        const response = await fetch('/api/projects/accomplished');\r\n        const responseData = await response.json();\r\n        // console.log(responseData)\r\n        setProjects(responseData);   \r\n    }\r\n\r\n    const categoryOngoing = async () => {\r\n        const response = await fetch('/api/projects/ongoing');\r\n        const responseData = await response.json();\r\n        // console.log(responseData)\r\n        setProjects(responseData);   \r\n    }\r\n    \r\n    const getProjectId = async (projectId) => {\r\n        try {\r\n            await axios.post(`/api/projects/updateViewCount/${projectId}`);\r\n        } catch (err) {\r\n            console.log(err.response)\r\n        }\r\n    }\r\n\r\n    // console.log(projects)\r\n    //Accomplished/Ongoing Category\r\n    //onClick={() => categoryAccomplished/Ongoing(status:Accomplished/Ongoing)}\r\n    //const categoryAccomplished/Ongoing = async (status) =>{}\r\n    // dito icocompare mo yung Accomplished/Ongoing na status to all proposals\r\n    // if nag true ididsplay natin\r\n\r\n\r\n\r\n    return (\r\n        <div className='citizenprojects-container' >\r\n            <Row className='citizenprojects-catbar-container'>\r\n                <Col className='citizenprojects-catbar'>\r\n                    <button className='citizenprojects-catbar-item' onClick={() => categoryAll()}>All</button>\r\n                    <button className='citizenprojects-catbar-item' onClick={() => categoryAccomplished()}>Accomplished</button>\r\n                    <button className='citizenprojects-catbar-item' onClick={() => categoryOngoing()}>Ongoing</button>\r\n                </Col>\r\n            </Row> \r\n            {projects && projects.map(project =>(\r\n                <Row  className='citizenprojects-short' key={project._id}>\r\n                <Col className='citizenprojects-shortinfo'>\r\n                    <Row className='citizenprojects-shortinfo-auth'>\r\n                        <h2>{project.title}</h2>\r\n                        <Col className='citizenprojects-auth-container'>\r\n                            <div className='citizenprojects-auth'>{project.userId}</div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='citizenprojects-shortinfo-desc'>\r\n                        {project.description}\r\n                    </Row>\r\n                    <Row className='citizenprojects-shortinfo-status'>\r\n                        <p>Status: {project.status}</p>\r\n                        <div className='citizenprojects-shortinfo-status-views'>\r\n                            <i className=\"fas fa-eye\"/> <span>{project.viewCount}</span>\r\n                        </div>\r\n                    </Row>\r\n                    {/* onClick{()=> viewCountUp(project._id)}  */}\r\n                    <Link className='citizenprojects-viewmore' onClick = { () => getProjectId(project._id) } to={`/citizen-view-project/${project._id}`} >\r\n                        View More\r\n                    </Link>\r\n                </Col>\r\n\r\n                <Col className='citizenprojects-shortinfo-img-container'>\r\n                    <div className='citizenprojects-shortinfo-img-frame'>\r\n                        <img src={project.coverImage}/>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\nexport default CitizenProjects;\r\n\r\n\r\n\r\n","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\CitizenReports.jsx",["445","446","447","448","449","450"],"import \"./CitizenReports.css\";\r\nimport React, {useEffect, useState} from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport ReportsNav from \"../../../components/Citizen/ReportsNav/ReportsNav\";\r\nimport { Row, Col, Form, Button, Container} from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst CitizenReports = () => {\r\n    const [reports, setReports] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            const response = await fetch('/api/reports');\r\n            const responseData = await response.json();\r\n            setReports(responseData);\r\n        };\r\n        sendRequest();\r\n    }, []);\r\n\r\n    const deletereport = async (reportlId) => {\r\n        console.log(reportlId);\r\n        const response = await axios.delete(`/api/reports/${reportlId}`);\r\n        const refresh = await fetch('/api/reports');\r\n        const responseData = await refresh.json();\r\n        setReports(responseData.data.report);\r\n    }\r\n\r\n    const categoryAll = async () => {\r\n        const response = await fetch('/api/reports');\r\n        const responseData = await response.json();\r\n        // console.log(responseData)\r\n        setReports(responseData);\r\n    }\r\n\r\n    const categoryConfirmed = async () => {\r\n        const response = await fetch('/api/reports/confirmed');\r\n        const responseData = await response.json();\r\n        // console.log(responseData)\r\n        setReports(responseData);   \r\n    }\r\n\r\n    const categoryCancelled = async () => {\r\n        const response = await fetch('/api/reports/cancelled');\r\n        const responseData = await response.json();\r\n        // console.log(responseData)\r\n        setReports(responseData);   \r\n    }\r\n    \r\n    const categoryResolved = async () => {\r\n        const response = await fetch('/api/reports/resolved');\r\n        const responseData = await response.json();\r\n        // console.log(responseData)\r\n        setReports(responseData);   \r\n    }\r\n\r\n\r\n    return(\r\n        <Container className='citizenreports-Container'>\r\n            <Row className='citizenreports-catbar-container'>\r\n                <Col className='citizenreports-catbar'>\r\n                    <button className='citizenreports-catbar-item' onClick={() => categoryAll()}>All</button>\r\n                    <button className='citizenreports-catbar-item' onClick={() => categoryConfirmed()}>Confirmed</button>\r\n                    <button className='citizenreports-catbar-item' onClick={() => categoryCancelled()}>Cancelled</button>\r\n                    <button className='citizenreports-catbar-item' onClick={() => categoryResolved()}>Resolved</button>\r\n                </Col>\r\n            </Row>\r\n            <Row className='citizenreports-btn-container'>\r\n                <Col className='citizenreports-btnbar'>\r\n                    <Link className='citizenreports-btn-submit' to='/citizen-submit-reports'>Submit a report</Link> \r\n                    <Link className='far fa-comment citizenreports-btn-chat' to='/citizen-chat-report'/>\r\n                </Col>\r\n            </Row>\r\n            {/*\r\n            <Row className='citizenreports-short'>\r\n                <Col className='citizenreports-img-container'>\r\n                    <img className='citizenreports-img' alt='citizenreports-img'src=\"https://th.bing.com/th/id/OIP.YLpvvCgXD0sI6X5dg0i6UgHaE7?pid=ImgDet&rs=1\"/>\r\n                </Col>\r\n\r\n                <Col>\r\n                    <Row className='citizenreports-title-container'>\r\n                        <span className='citizenreports-title'><h2>Road Damage</h2></span>\r\n                    </Row>\r\n                    <Row className='citizenreports-details'>\r\n                        <Col className='citizenreports-info-container'>\r\n                            <span className='reportInfo'>Where: Cainta Rizal</span>\r\n                            <span className='reportInfo'>Reported by: John Doe</span>\r\n                            <span className='reportInfo'>Date Submitted: September 17, 2021 11:17am</span>\r\n                        </Col>\r\n                        <Col className='citizenreports-info-status-container'>\r\n                            <span className='reportInfo'>Status: Confirmed</span>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row> */}\r\n            {reports && reports.map(report => (\r\n                <Row className='citizenreports-short' key={report._id}>\r\n                    <Col className='citizenreports-img-container'>\r\n                        <img className='citizenreports-img' alt='citizenreports-img'src={report.images} onClick={()=> window.open(report.images, \"_blank\")}/>\r\n                    </Col>\r\n                    <Col>\r\n                        <Row className='citizenreports-title-container'>\r\n                            <span className='citizenreports-title'><h2>{report.title}</h2></span>\r\n                        </Row>\r\n                        <Row className='citizenreports-details'>\r\n                            <Col className='citizenreports-info-container'>\r\n                                <span className='reportInfo'>Where: {report.location}</span>\r\n                                <span className='reportInfo'>Desc : {report.description}</span>\r\n                                <span className='reportInfo'>Reported By : {report.userName}</span>\r\n                                <span className='reportInfo'>Date Submitted: {new Date(report.createdAt).toLocaleDateString()}</span>\r\n                                {/* <span className='reportInfo'><i onClick={()=> deletereport(report._id)} className=\"fas fa-trash\"></i></span> */}\r\n\r\n                            </Col>\r\n                            <Col className='citizenreports-info-status-container'>\r\n                                <span className='reportInfo'>Status: {report.status}</span>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            ))}\r\n        </Container>\r\n        // <div className=\"reportsContainer\">\r\n        //      <div className=\"reportsMain\">\r\n        //          <div className=\"category\">\r\n        //              <React.Fragment>\r\n        //                     <ReportsNav/> \r\n        //             </React.Fragment> \r\n        //         </div>\r\n        //         <div className=\"citizenreports-btn-container\">\r\n        //             <NavLink to=\"/citizen-submit-reports\">\r\n        //                 <button className=\"citizenreports-submitreport-btn\">Create A Report</button>\r\n        //                 </NavLink>\r\n        //             <NavLink to=\"/citizen-chat-report\">\r\n        //                 <div className='chat-icon'>\r\n        //                     <i class=\"far fa-comment\"></i>\r\n        //                 </div>\r\n        //             </NavLink>\r\n        //         </div>\r\n        //         <Row className=\"citizenreportShort\">\r\n        //                 <Col className=\"citizenreportimg-container\">\r\n        //                     <img className=\"reportImg\" alt=\"reportimg\"src=\"https://th.bing.com/th/id/OIP.YLpvvCgXD0sI6X5dg0i6UgHaE7?pid=ImgDet&rs=1\"/>\r\n        //                 </Col>\r\n        //                 <Col>\r\n        //                     <Row className='citizenreport-reportTitleContainer'>\r\n        //                         <span className=\"citizenreport-reportTitle\"><h2>Road Damage</h2></span>\r\n        //                     </Row>\r\n        //                     <Row className=\"reportDetails\">\r\n        //                         <Col className='reportInfo-container'>\r\n        //                             <span className=\"reportInfo\">Where: Cainta Rizal</span>\r\n        //                             <span className=\"reportInfo\">Reported by: John Doe</span>\r\n        //                             <span className=\"reportInfo\">Date Submitted: September 17, 2021 11:17am</span>\r\n        //                         </Col>\r\n        //                         <Col className='reportInfo-container'>\r\n        //                             <span className=\"reportInfo\">Status: Confirmed</span>\r\n        //                         </Col>\r\n        //                     </Row>\r\n        //                 </Col>\r\n        //         </Row>\r\n        //     </div>\r\n        // </div>\r\n    );\r\n}\r\n\r\nexport default CitizenReports;","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\SubmitReport\\CitizenSubmitReport.jsx",["451","452"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { Formik, Form, ErrorMessage, Field } from 'formik';\r\nimport * as ReactBootStrap from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport FormikInput from '../../../../components/UI/Input/FormikInput/FormikInput';\r\nimport SubmitButton from '../../../../components/UI/Buttons/SubmitButton/SubmitButton';\r\nimport CancelButton from '../../../../components/UI/Buttons/CancelButton/CancelButton';\r\nimport Swal from 'sweetalert2';\r\nimport { Context } from '../../../../context/Context';\r\nimport classes from '../../CitizenProposals/CreateProposals/CitizenCreateProposals.module.css';\r\nimport axios from 'axios';\r\nimport './CitizenSubmitReport.css';\r\n\r\nconst CitizenSubmitReport = () => {\r\n    const citizenUser = useContext(Context);\r\n    const [userId, setUserId] = useState();\r\n    const [redirect, setRedirect] = useState(false);\r\n    const [loading, setLoading] =  useState(true);\r\n    const [file, setFile] = useState(null);\r\n    const userType = citizenUser.user.data.user.userType;\r\n\r\n    useEffect(() => {\r\n        const getUserId = async () => {\r\n            const { user:{ data: { user: { firstname } } }} = citizenUser;\r\n            const { user:{ data: { user: { lastname } } }} = citizenUser;\r\n            let username = JSON.stringify(firstname+\" \"+lastname);\r\n            username = username.replace(/['\"]+/g, '');\r\n            setUserId(username);\r\n        }\r\n        getUserId();\r\n    },[]);\r\n\r\n    console.log(userId);  \r\n    const initialValues = {\r\n        userId: citizenUser.user.data.user._id,\r\n        userName: '',\r\n        title: '',\r\n        description: '',\r\n        location: '',\r\n        status:'Pending',\r\n    \r\n    };\r\n    \r\n    \r\n    const onSubmit = async (values) => {\r\n        console.log('Form values', values);\r\n\r\n        const userName = values.userName.replace('',userId)\r\n        const newValues = {...values, userName, userType}\r\n        const images = \"\";\r\n\r\n        const reportData = {\r\n            description: newValues.description,\r\n            location: newValues.location,\r\n            status: newValues.status,\r\n            title: newValues.title,\r\n            userId: newValues.userId,\r\n            userName: newValues.userName,\r\n            userType: newValues.userType,\r\n            images,\r\n        }\r\n\r\n        if (file) {\r\n            setLoading(false);\r\n            const data = new FormData();\r\n            const filename = Date.now() + file.name;\r\n            data.append(\"name\", filename);\r\n            data.append(\"file\", file);\r\n            data.append(\"upload_preset\", \"dev_prac\");\r\n            data.append(\"cloud_name\", \"karlstorage\");\r\n            try {\r\n                const res = await axios.post(\"https://api.cloudinary.com/v1_1/karlstorage/image/upload\", data);\r\n                reportData.images = res.data.secure_url;\r\n\r\n                try {\r\n                    const res = await axios.post('/api/reports', reportData).catch(err => {\r\n                        console.log('Error: ', err.res.data);\r\n                    });\r\n                    \r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Report Created!',\r\n                        text: 'Your report is been posted . . .'\r\n                    });\r\n\r\n                    setLoading(true);\r\n                    setRedirect(true);\r\n                } catch (err) {\r\n                    console.log(err)\r\n                    setLoading(true);\r\n                }\r\n            } catch (err) {\r\n                console.log(err)\r\n                setLoading(true);\r\n            }\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Photo is requried!',\r\n                text: 'Upload a photo',\r\n            });\r\n            setLoading(true);\r\n        }\r\n    };\r\n    \r\n    const validationSchema = Yup.object({\r\n        userName: Yup.string(),\r\n        title: Yup.string().required('Required'),\r\n        description: Yup.string().required('Required'),\r\n        location: Yup.string().required(\"Required\"),\r\n    });\r\n\r\n    return(\r\n        <>\r\n            { redirect && (<Redirect to = '/citizen-reports' />) }\r\n            {loading ? (\r\n            <Container className=\"citizenSubmitReport-container\">\r\n                <Row>\r\n                    <div className=\"citizen-header\">\r\n                        <h1>Found a Problem? Go Submit a Report</h1>\r\n                    </div>\r\n                    <Formik\r\n                        initialValues={initialValues}\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        <Form className=\"citizenSubmitReport-edit\">\r\n                            <Col>\r\n                                <Row>\r\n                                    <Col sm={6}>\r\n                                        <Row className=\"citizenSubmitReport-input\">\r\n                                            <label>Report Title</label>\r\n                                            <FormikInput \r\n                                            type=\"text\"\r\n                                            placeholder=\"Report Title\"\r\n                                            id=\"title\"\r\n                                            name=\"title\"\r\n                                            />\r\n                                            <ErrorMessage name=\"title\">\r\n                                                {errorMsg => <div className=\"InputValidation\">{errorMsg}</div>}\r\n                                            </ErrorMessage>\r\n                                            <label>Description</label>\r\n                                            <FormikInput \r\n                                                type=\"text\"\r\n                                                placeholder=\"Description\"\r\n                                                id=\"description\"\r\n                                                name=\"description\"\r\n                                            />\r\n                                            <ErrorMessage name=\"description\">\r\n                                                {\r\n                                                    errorMsg => <div className=\"InputValidation\">{errorMsg}</div>\r\n                                                }\r\n                                            </ErrorMessage>\r\n                                        </Row>\r\n                                    </Col>\r\n                                    <Col className=\"citizenSubmitReportQuote\">\r\n                                        <h2>Reporting a problem or an issue is your <span className=\"text-highlight\">ambag</span></h2>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row >\r\n                                    <Col className=\"citizenSubmitReport-input\">\r\n                                        <label>Location</label>\r\n                                        <FormikInput \r\n                                            type=\"text\"\r\n                                            placeholder=\"Location\"\r\n                                            id=\"location\"\r\n                                            name=\"location\"\r\n                                        />\r\n                                        <ErrorMessage name=\"location\">\r\n                                            {\r\n                                                errorMsg => <div className=\"InputValidation\">{errorMsg}</div>\r\n                                            }\r\n                                        </ErrorMessage>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className={classes.CitizenCreateProposalPhotoInput}>\r\n                                    <Col className={classes.CitizenCreateProposalFormInput} >\r\n                                        <label style={{textAlign: 'center', marginTop: '5%'}}>Photo</label>\r\n\r\n                                        <div className = 'CitizenCreateProposalImg'>\r\n                                            {file && <img src = { (URL.createObjectURL(file)) } alt = '' onClick={()=> window.open(URL.createObjectURL(file), \"_blank\")}/>}\r\n                                        </div>\r\n\r\n                                        <label  htmlFor=\"images\"><i className=\"fas fa-image\"></i></label>\r\n\r\n                                        <Field \r\n                                            type=\"file\"\r\n                                            id=\"images\"\r\n                                            name=\"images\"\r\n                                            style={{display: 'none'}}\r\n                                            onChange = {(e) => setFile(e.target.files[0])}\r\n                                        />\r\n                                        <ErrorMessage name=\"images\">\r\n                                            {\r\n                                                errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n                                            }\r\n                                        </ErrorMessage>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className=\"ButtonDiv\">\r\n                                            <SubmitButton />\r\n                                            <CancelButton />\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            \r\n                        </Form>\r\n                    </Formik>  \r\n                </Row>\r\n            </Container>\r\n            ) : (\r\n                    <div style = {{\r\n                        color: '#777',\r\n                        textAlign: 'center',\r\n                    }}>\r\n                      <h2 style = {{marginTop: '10%'}}>Processing Please Wait</h2>\r\n                      <div>\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"primary\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"secondary\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"success\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"danger\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"warning\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"info\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"light\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"dark\" />\r\n                      </div>\r\n                    </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CitizenSubmitReport;","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProposals\\CitizenProposals.jsx",["453","454","455"],"import React, {useEffect, useState, useContext} from 'react';\r\nimport axios from 'axios';\r\nimport './CitizenProposals.css';\r\nimport { Row, Col, Container} from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Context } from '../../../context/Context';\r\n\r\n\r\nconst CitizenProposals = () => {\r\n    const {user} = useContext(Context)\r\n    const [proposals, setProposals] = useState([]);\r\n    const currentCitizenUser = user.data.user.firstname + \" \" + user.data.user.lastname;\r\n    // const [proposals, setProposals] = useState([]);\r\n    // const [proposals, setProposals] = useState([]);\r\n    // const [proposals, setProposals] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            const response = await fetch('/api/proposals');\r\n            const responseData = await response.json();\r\n            // console.log(responseData)\r\n            setProposals(responseData.data.proposals);\r\n        };\r\n        sendRequest();\r\n    }, []);\r\n\r\n    const deleteProposal = async (proposalId) => {\r\n        console.log(proposalId);\r\n        const citizen = {\r\n            username: currentCitizenUser,\r\n            usertype: user.data.user.userType\r\n        }\r\n        const response = await axios.delete(`/api/proposals/${proposalId}`, {data: citizen});\r\n        const refresh = await fetch('/api/proposals');\r\n        const responseData = await refresh.json();\r\n        setProposals(responseData.data.proposals);\r\n    }\r\n\r\n    const getProposalId = async (proposalId) => {\r\n        console.log(proposalId);\r\n        localStorage.setItem('proposalid', proposalId);\r\n    }\r\n    \r\n    \r\n    //ALL Category\r\n    //onClick={() => categoryAll(status:lahat ng status na meron)}  initialize nalang ng local array na [\"Pending\",\"Approved\",\"Rejected\"] \r\n    const categoryAll = async () => {\r\n        const response = await fetch('/api/proposals');\r\n        const responseData = await response.json();\r\n        // console.log(responseData)\r\n        setProposals(responseData.data.proposals);\r\n    }\r\n    \r\n    //const categoryAll = async (status) =>{}\r\n    // dito icocompare mo yung local content array to all proposal status\r\n    // if nag true ididsplay natin\r\n\r\n    const categoryApproved = async () => {\r\n        const response = await fetch('/api/proposals/approved');\r\n        const responseData = await response.json();\r\n        // console.log(responseData)\r\n        setProposals(responseData);\r\n        // console.log(responseData)\r\n    }\r\n\r\n    const categoryRejected = async () => {\r\n        const response = await axios.get('/api/proposals/rejected');\r\n        // const responseData = await response.json();\r\n        // console.log(response.data)\r\n        setProposals(response.data);\r\n    }\r\n    //APPROVED/REJECTED Category\r\n    //onClick={() => categoryApproved/Rejected(status:Approved/Rejected)}\r\n    //const categoryApproved/Rejected = async (status) =>{}\r\n    // dito icocompare mo yung Approved/Rejected na status to all proposals\r\n    // if nag true ididsplay natin\r\n\r\n    const categoryOwn = async () => {\r\n        // const currentuserid = user.user.data.user._id;\r\n        // const useridfilter = {\r\n        //     citizenId: currentuserid,\r\n        // }\r\n        // const response = await fetch('/api/proposals', userId);\r\n        // const responseData = await response.json();\r\n        // // console.log(responseData)\r\n        // setProposals(responseData.data.proposals);\r\n        const response = await axios.get(`/api/proposals/self/${user.data.user._id}`);\r\n        // // const responseData = await response.json();\r\n        // console.log(response.data);\r\n        setProposals(response.data);\r\n    }\r\n    //OWN Category\r\n    //onClick={() => categoryOwn(user.data.user._id)}\r\n    //const categoryOwn = async (userId) =>{}\r\n    //dito icocompare mo ang userId mo sa lahat ng userIds na meron sa proposals\r\n    //if nag true ididisplay\r\n    console.log(user.data.user._id);\r\n\r\n    return(\r\n        <Container className=\"proposalsContainer\">\r\n            <div className=\"proposalsMain\">\r\n                <Row className='citizenproposals-catbar-container'>\r\n                    <Col className='citizenproposals-catbar'> \r\n                        <button className='citizenproposals-catbar-item' onClick={() => categoryAll()}>All</button> \r\n                        <button className='citizenproposals-catbar-item' onClick={() => categoryApproved()}>Approved</button>\r\n                        <button className='citizenproposals-catbar-item' onClick={() => categoryRejected()}>Rejected</button>\r\n                        <button className='citizenproposals-catbar-item' onClick={() => categoryOwn()}>My Proposals</button>\r\n                    </Col>\r\n                </Row>\r\n                {/* <div className=\"proposalsCreateBtnContainer\"> */}\r\n                        <NavLink to=\"/citizen-create-proposals\">\r\n                            <button className=\"proposalCreate\">Create Proposal</button>\r\n                        </NavLink>\r\n                {/* </div> */}\r\n\r\n            {/* <div className=\"proposalShortContainer\">\r\n                <div className=\"proposalShort\">\r\n                    <div className=\"proposalTitleContainer\">\r\n                        <div className=\"proposalTitle\">\r\n                            <h2>Lorem Ipsum</h2>\r\n                        </div>\r\n                        <div className=\"proposalAuthImg\">\r\n                            <img src=\"https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80\" alt=\"Author\"/>\r\n                        </div>\r\n                        <div className=\"proposalAuth\">\r\n                            Juan Carlos\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"proposalContent\">\r\n                        <div className=\"proposalShortInfo\">\r\n                            <h2>Lorem ipsum</h2>\r\n                            <div className=\"proposalAuthContainer\">\r\n                                <div className=\"proposalAuthImg\">\r\n                                    <img src=\"https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80\" alt=\"Author\"/>\r\n                                </div>\r\n                                <div className=\"proposalAuth\">\r\n                                    Juan Carlos\r\n                                </div>\r\n                            </div>\r\n                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis efficitur orci et interdum vulputate. \r\n                                Interdum et malesuada fames ac ante ipsum primis in faucibus. Ut vel euismod leo. Ut varius a magna \r\n                                eu vulputate. </p>\r\n                            <p>Upvote: 14 </p><p> Downvote: 3</p>\r\n                        </div>\r\n                        <div className=\"proposalShortImgContainer\">\r\n                            <div className=\"proposalShortImgFrame\">\r\n                                <img src=\"https://th.bing.com/th/id/R.b647d58e6001e77b9471b110f44c2641?rik=Kariecnl8cUg1g&riu=http%3a%2f%2ffilipinoaustralianjournal.com.au%2fwp-content%2fuploads%2f2016%2f03%2fphilippine-tricycles.jpg&ehk=%2fECLwkRpQ1vL3g8sFPsT8JnrucAFmfXhwjRaYgXJmxw%3d&risl=&pid=ImgRaw&r=0\" alt=\"\" className=\"proposalImg\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n            {proposals && proposals.map(proposal => (\r\n                <div className=\"proposalShortContainer\" key={proposal._id}>\r\n                    <div className=\"proposalShort\">\r\n                        <div className=\"proposalTitleContainer\">\r\n                            <div className=\"proposalTitle\">\r\n                                <h2>{proposal.title}</h2>\r\n                            </div>\r\n                            <div className=\"proposalAuthImg\">\r\n                                <img src=\"https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80\" alt=\"Author\"/>\r\n                            </div>\r\n                            <div className=\"proposalAuth\">\r\n                                {proposal.userName}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"proposalContent\">\r\n                            <div className=\"proposalShortInfo\">\r\n                                <h2>{proposal.title}</h2>\r\n                                <div className=\"proposalAuthContainer\">\r\n                                    <div className=\"proposalAuthImg\">\r\n                                        <img src=\"https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80\" alt=\"Author\"/>\r\n                                    </div>\r\n                                    <div className=\"proposalAuth\">\r\n                                        {proposal.userName}\r\n                                    </div>\r\n                                </div>\r\n                                    <p>{proposal.description} </p>\r\n                                <div className=\"proposalsBody\">\r\n                                    <i className=\"fas fa-thumbs-up\"/>{proposal.upvote.length ? proposal.upvote.length : 0}\r\n                                    <i className=\"fas fa-thumbs-down\"/>{proposal.downvote.length ? proposal.downvote.length : 0}\r\n                                    {proposal.userName === currentCitizenUser && <i style = {{cursor: 'pointer'}} onClick={()=> deleteProposal(proposal._id)} className=\"fas fa-trash\"></i>}\r\n                                </div>\r\n                                {proposal.status === \"Rejected\" ?  \r\n                                null\r\n                                :\r\n                                <Link className='proposalsViewMore' to={`/citizen-view-proposals`} onClick={()=> getProposalId(proposal._id)}>\r\n                                    View More\r\n                                </Link>\r\n                                }\r\n                            </div>\r\n                            <div className=\"proposalShortImgContainer\">\r\n                                <div className=\"proposalShortImgFrame\">\r\n                                    <img src={proposal.images} alt=\"\" className=\"proposalImg\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>      \r\n    </Container>\r\n    );\r\n}\r\n\r\nexport default CitizenProposals;\r\n\r\n\r\n//Backup code\r\n{/* <Row className=\"proposalShortContainer\"> gawing citizenproposals-shorts-container  dito lahat nakalagay\r\n\r\n\r\n        <Row className=\"proposalShort\">           citizenproposals-mobile-shortinfo\r\n            <Row className=\"proposalTitleContainer\">   delete\r\n                <Row className=\"proposalTitle\">          \r\n                    <h2>Lorem Ipsum</h2>               citizenproposal-mobile-shortinfo > h2\r\n                </Row>\r\n                <Col className=\"proposalAuthImg\">      citizenproposal-mobile-shortinfo > img\r\n                    <img src=\"https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80\" alt=\"Author\"/>\r\n                </Col>\r\n                <Row className=\"proposalAuth\">Juan Carlos</Row>      citizenproposal-mobile-shortinfo > p\r\n            </Row>\r\n        </Row>\r\n\r\n\r\n\r\n    <Row className=\"proposalContent\">                   citizenproposals-shortinfo\r\n        <Row className=\"proposalShortInfo\">             delete\r\n            <h2>Lorem ipsum</h2>                        citizenproposals-shortinfo > h2\r\n            <div className=\"proposalAuthContainer\">     delete\r\n                <div className=\"proposalAuthImg\">       delete   citizenproposals-shortinfo > h2\r\n                    <img src=\"https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80\" alt=\"Author\"/>\r\n                </div>\r\n                <div className=\"proposalAuth\">          delete citizenproposals-shortinfo > h5\r\n                    <h5>Juan Carlos</h5>\r\n                </div>\r\n            </div>\r\n\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis efficitur orci et interdum vulputate. \r\n                Interdum et malesuada fames ac ante ipsum primis in faucibus. Ut vel euismod leo. Ut varius a magna \r\n                eu vulputate. </p>\r\n            <p>Upvote: 14 </p><p> Downvote: 3</p>       citizenproposals-shortinfo > p\r\n        </div>\r\n        <div className=\"proposalShortImgContainer\">     citizenproposals-shortinfo-img-frame\r\n            <div className=\"proposalShortImgFrame\">     citizenproposals-shortinfo-img-frame > img   \r\n                <img src=\"https://th.bing.com/th/id/R.b647d58e6001e77b9471b110f44c2641?rik=Kariecnl8cUg1g&riu=http%3a%2f%2ffilipinoaustralianjournal.com.au%2fwp-content%2fuploads%2f2016%2f03%2fphilippine-tricycles.jpg&ehk=%2fECLwkRpQ1vL3g8sFPsT8JnrucAFmfXhwjRaYgXJmxw%3d&risl=&pid=ImgRaw&r=0\" alt=\"\" className=\"proposalImg\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</Row> */}","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProfile\\CitizenProfile.jsx",["456"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Context } from '../../../context/Context';\r\nimport { Row, Col, Form, Container, Button } from 'react-bootstrap';\r\nimport * as ReactBootStrap from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport './CitizenProfile.css';\r\n\r\nconst CitizenProfile = () => {\r\n    const { user, dispatch } = useContext(Context);\r\n    const [file, setFile] = useState(null);\r\n    const [profilePic, setProfilePic] = useState(\"\");\r\n    const [logs, setLogs] = useState([]);\r\n    const [iconUpload, setIconUpload] = useState(false);\r\n    const [reports, setReports] = useState([]);\r\n    const [proposals, setProposals] = useState([]);\r\n    const [verifiedReports, setVerifiedReports] = useState([]);\r\n    const [approvedProposals, setApprovedProposals] = useState([]);\r\n    const [loading, setLoading] =  useState(true);\r\n    \r\n    const citizen = user.data.user.firstname + \" \" + user.data.user.lastname;\r\n\r\n    console.log(citizen)\r\n\r\n    useEffect(() => {\r\n        const fetchLogs = async () => {\r\n            const res = await axios.get(`/api/history/citizens/?user=${citizen}`);\r\n            setLogs(res.data);\r\n        }\r\n\r\n        const fetchReports = async () => {\r\n            const res = await axios.get(`/api/reports/?user=${citizen}`);\r\n            let count = 0\r\n            \r\n            res.data.forEach(() => {\r\n            count += 1;\r\n            })\r\n\r\n            setReports(count);\r\n        }\r\n\r\n        const fetchProposals = async () => {\r\n            const res = await axios.get(`/api/proposals/?user=${citizen}`);\r\n            let count = 0\r\n            \r\n            res.data.data.proposals.forEach(() => {\r\n            count += 1;\r\n            })\r\n\r\n            setProposals(count);\r\n        }\r\n\r\n        const fetchVerifiedReports = async () => {\r\n            const res = await axios.get(`/api/reports/confirmed/?user=${citizen}`);\r\n            let count = 0\r\n            \r\n            res.data.forEach(() => {\r\n            count += 1;\r\n            })\r\n            setVerifiedReports(count);\r\n        }\r\n\r\n        const fetchApprovedProposals = async () => {\r\n            const res = await axios.get(`/api/proposals/approved/?user=${citizen}`);\r\n            let count = 0\r\n            \r\n            res.data.forEach(() => {\r\n            count += 1;\r\n            })\r\n\r\n            setApprovedProposals(count);\r\n        }\r\n\r\n        fetchLogs();\r\n        fetchReports();\r\n        fetchProposals();\r\n        fetchVerifiedReports();\r\n        fetchApprovedProposals();\r\n    }, [])\r\n\r\n    const setIconTrue = () => {\r\n        setIconUpload(true);\r\n    }\r\n\r\n    const showLogs = async () => {\r\n        Swal.fire({\r\n            icon: 'info',\r\n            title: 'Activity Logs',\r\n            html: `${\r\n                logs.map((L) => {\r\n                const date = new Date(L.createdAt).toLocaleDateString();\r\n                return \"<p style ='text-align: justify'>Timestamp: \" + date + \" Reason: \" + L.reason + \" By: \" + L.user + \"<br/></p>\";\r\n            }).join('')}`,\r\n        });\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        dispatch({ type: \"UPDATE_START\" });\r\n        const updateAccount = {\r\n            profilePic,\r\n            token: user.token,\r\n        }\r\n        if (file) {\r\n            setLoading(false);\r\n            const data = new FormData();\r\n            const filename = Date.now() + file.name;\r\n            data.append(\"name\", filename);\r\n            data.append(\"file\", file);\r\n            data.append(\"upload_preset\", \"dev_prac\");\r\n            data.append(\"cloud_name\", \"karlstorage\");\r\n            try {\r\n                const res = await axios.post(\"https://api.cloudinary.com/v1_1/karlstorage/image/upload\", data);\r\n                updateAccount.profilePic = res.data.secure_url;\r\n                try {\r\n                    const res = await axios.put(\"/api/citizen/\" + user.data.user._id, updateAccount);\r\n                    dispatch({ type: \"UPDATE_SUCCESS\", payload: res.data });\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Updated!',\r\n                        text: 'Profile Picture Changed',\r\n                    });\r\n                    setLoading(true);\r\n                    setIconUpload(false);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                    dispatch({ type: \"UPDATE_FAILURE\" })\r\n                    setLoading(true);\r\n                }\r\n            } catch (err) {\r\n                setLoading(true);\r\n                console.log(err)\r\n            }\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Photo is requried!',\r\n                text: 'Upload a photo',\r\n            });\r\n            setIconUpload(false);\r\n            setProfilePic(\"\");\r\n            setLoading(true);\r\n        }\r\n    }\r\n    return(\r\n        <>\r\n        {loading ? (\r\n        <Container className = 'citizenProfile-container'>\r\n            <div className = 'citizenAccountImg-shadow'>\r\n                <div className = 'citizenAccountImg'>\r\n                    <img src= {file ? (URL.createObjectURL(file)) : `${user.data.user.profilePic}`} alt=\"\" ></img>\r\n                </div>\r\n            </div>\r\n            \r\n            {iconUpload === false &&\r\n                <>\r\n                    <div className = 'citizenProfile-changeLink'>\r\n                        <p onClick = { setIconTrue }>Change Profile Picture?</p>\r\n                    </div>\r\n\r\n                    <div className=\"citizenProfile-changeImg\">\r\n                        <Form.Label ><i className=\"fas fa-history\" onClick = { showLogs }></i></Form.Label>\r\n                    </div>\r\n                </>\r\n            }\r\n\r\n            {iconUpload &&\r\n                <div className=\"citizenProfile-changeImg\">\r\n                    <Form.Label  htmlFor=\"iconImg\"><i className=\"fas fa-image\"></i></Form.Label>\r\n\r\n                    <ReactTooltip id=\"infoBtn\" place=\"top\" effect=\"solid\">\r\n                        If button is clicked and not submitting please input photo again. . .\r\n                    </ReactTooltip>\r\n                    <Form.Label  data-tip data-for=\"infoBtn\" htmlFor=\"btnImg\"><i className=\"fas fa-upload\"></i></Form.Label>\r\n                </div>\r\n            }\r\n\r\n            <div  className = 'col-md-10 offset-md-1' id = 'citizenProfile-body'>\r\n                <div className = 'citizenProfile-name'> \r\n                     <p>{user.data.user.firstname + \" \" + user.data.user.middlename + \" \" + user.data.user.lastname}</p>\r\n                 </div>\r\n                 <div className = 'citizenProfile-statsDesktop'>\r\n                    <Row>\r\n                        {approvedProposals === 10 || verifiedReports === 5 ? (\r\n                            <Col className = 'citizenProfile-Badge'>\r\n                            <h4>Badge</h4>\r\n                            {verifiedReports === 5 &&\r\n                            <>\r\n                                <ReactTooltip id=\"reportsBadge\" place=\"top\" effect=\"solid\">\r\n                                    You have reached five (5) verified reports!\r\n                                </ReactTooltip>\r\n                                <div className = 'citizenProfile-BadgeImg'>\r\n                                    <img data-tip data-for=\"reportsBadge\" src='https://res.cloudinary.com/karlstorage/image/upload/v1633067410/free-img/lxegqxd9012mtsfbr0wk.png' alt=\"badge\"></img> \r\n                                </div>\r\n                            </>\r\n                            }\r\n\r\n                            {approvedProposals === 10 &&\r\n                            <>\r\n                                <ReactTooltip id=\"proposalsBadge\" place=\"top\" effect=\"solid\">\r\n                                    You have reached ten (10) verified proposals!\r\n                                </ReactTooltip>\r\n                                <div className = 'citizenProfile-BadgeImg'>\r\n                                    <img data-tip data-for=\"proposalsBadge\" src=\"https://res.cloudinary.com/karlstorage/image/upload/v1633067410/free-img/swr8qrfxityadpnchoft.png\" alt=\"badge\"></img>\r\n                                </div>\r\n                            </>\r\n                            }\r\n                        </Col>\r\n                        ) : (<></>)}\r\n                        <Col>\r\n                            <Row>\r\n                                <Col className = 'citizenProfile-Stats'>\r\n                                    <h4>Proposals Created</h4>\r\n                                    <p>{ proposals }</p>\r\n                                </Col>\r\n                                <Col className = 'citizenProfile-Stats'>\r\n                                    <h4>Approved Proposals</h4>\r\n                                    <p>{ approvedProposals }</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col className = 'citizenProfile-Stats'>\r\n                                    <h4>Verified Reports</h4>\r\n                                    <p>{ verifiedReports }</p>\r\n                                </Col>\r\n                                <Col className = 'citizenProfile-Stats'>\r\n                                    <h4>Reports Created</h4>\r\n                                    <p>{ reports }</p>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                <div className = 'citizenProfile-statsMobile'>\r\n                    <Col>\r\n                        {approvedProposals === 10 || verifiedReports === 5 ? (\r\n                            <Row className = 'citizenProfile-Badge'>\r\n                                <Col>\r\n                                    <Row>\r\n                                        <Row><h4>Badge</h4></Row>\r\n                                        {verifiedReports === 5 &&\r\n                                        <>\r\n                                            <ReactTooltip id=\"reportsBadge\" place=\"top\" effect=\"solid\">\r\n                                                You have reached five (5) verified reports!\r\n                                            </ReactTooltip>\r\n                                            <div className = 'citizenProfile-BadgeImg'>\r\n                                                <img data-tip data-for=\"reportsBadge\" src='https://res.cloudinary.com/karlstorage/image/upload/v1633067410/free-img/lxegqxd9012mtsfbr0wk.png' alt=\"badge\"></img> \r\n                                            </div>\r\n                                        </>\r\n                                        }\r\n\r\n                                        {approvedProposals === 10 &&\r\n                                        <>\r\n                                            <ReactTooltip id=\"proposalsBadge\" place=\"top\" effect=\"solid\">\r\n                                                You have reached ten (10) verified proposals!\r\n                                            </ReactTooltip>\r\n                                            <div className = 'citizenProfile-BadgeImg'>\r\n                                                    <img data-tip data-for=\"proposalsBadge\" src=\"https://res.cloudinary.com/karlstorage/image/upload/v1633067410/free-img/swr8qrfxityadpnchoft.png\" alt=\"badge\"></img>\r\n                                            </div>\r\n                                        </>\r\n                                        }\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        ) : (<></>)}\r\n                        \r\n                        <Row className = 'citizenProfile-StatsMD'>\r\n                            <Col>\r\n                                <Row><h4>Proposals Created</h4></Row>\r\n                                <Row><p>{ proposals }</p></Row>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className = 'citizenProfile-StatsMD'>\r\n                            <Col>\r\n                            <Row><h4>Approved Proposals</h4></Row>\r\n                            <Row><p>{ approvedProposals }</p></Row>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className = 'citizenProfile-StatsMD'>\r\n                            <Col>\r\n                                <Row><h4>Verified Reports</h4></Row>\r\n                                <Row><p>{ verifiedReports }</p></Row>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className = 'citizenProfile-StatsMD'>\r\n                            <Col>\r\n                                <Row><h4>Reports Created</h4></Row>\r\n                                <Row><p>{ reports }</p></Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </div>\r\n            </div>\r\n            \r\n            <Form className = 'citizenProfile-edit' onSubmit = { handleSubmit }>\r\n                <h3>Personal Information</h3>\r\n                  <Form.Group>\r\n                    <input\r\n                        id=\"iconImg\"\r\n                        type=\"file\"\r\n                        name=\"citizenImg\"\r\n                        required\r\n                        style = {{display: \"none\"}}\r\n                        onChange = {(e) => setFile(e.target.files[0])}\r\n                    />\r\n                </Form.Group>\r\n\r\n                \r\n                <Form.Group>\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    <Form.Control\r\n                        className='citizenProfile-input'\r\n                        type=\"text\"\r\n                        name=\"lname\"\r\n                        autoComplete=\"off\"\r\n                        disabled\r\n                        placeholder={user.data.user.lastname}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>First Name</Form.Label>\r\n                    <Form.Control\r\n                        className='citizenProfile-input'\r\n                        type=\"text\"\r\n                        name=\"fname\"\r\n                        autoComplete=\"off\"\r\n                        disabled\r\n                        placeholder={user.data.user.firstname}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Middle Name</Form.Label>\r\n                    <Form.Control\r\n                        className='citizenProfile-input'\r\n                        type=\"text\"\r\n                        name=\"mname\"\r\n                        autoComplete=\"off\"\r\n                        disabled\r\n                        placeholder={user.data.user.middlename}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Suffix</Form.Label>\r\n                    <Form.Control\r\n                        className='citizenProfile-input'\r\n                        type=\"text\"\r\n                        name=\"sname\"\r\n                        autoComplete=\"off\"\r\n                        disabled\r\n                        placeholder={user.data.user.suffix}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Sex</Form.Label>\r\n                    <Form.Control\r\n                        className='citizenProfile-input'\r\n                        type=\"text\"\r\n                        name=\"sex\"\r\n                        autoComplete=\"off\"\r\n                        disabled\r\n                        placeholder={user.data.user.sex}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Birth Date</Form.Label>\r\n                    <Form.Control\r\n                        className='citizenProfile-input'\r\n                        type=\"text\"\r\n                        name=\"birthday\"\r\n                        autoComplete=\"off\"\r\n                        disabled\r\n                        placeholder={user.data.user.birthdate}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Full Address</Form.Label>\r\n                    <Form.Control\r\n                        className='citizenProfile-input'\r\n                        type=\"text\"\r\n                        name=\"address\"\r\n                        autoComplete=\"off\"\r\n                        disabled\r\n                        placeholder={user.data.user.street +\" \"+user.data.user.barangay +\" \"+user.data.user.city +\" \"+user.data.user.region}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Button id=\"btnImg\" type = 'submit' style={{display:'none'}}></Button>\r\n            </Form>\r\n            <Link to = '/citizen-pass-update' className = 'citizenProfile-passwordUpdate'><i className=\"editIcon far fa-edit\"></i></Link>\r\n        </Container>\r\n        ) : (\r\n            <div className = 'citizenProfileLoading'>\r\n              <h2>Processing Please Wait</h2>\r\n              <div>\r\n                <ReactBootStrap.Spinner animation=\"grow\" variant=\"primary\" />\r\n                <ReactBootStrap.Spinner animation=\"grow\" variant=\"secondary\" />\r\n                <ReactBootStrap.Spinner animation=\"grow\" variant=\"success\" />\r\n                <ReactBootStrap.Spinner animation=\"grow\" variant=\"danger\" />\r\n                <ReactBootStrap.Spinner animation=\"grow\" variant=\"warning\" />\r\n                <ReactBootStrap.Spinner animation=\"grow\" variant=\"info\" />\r\n                <ReactBootStrap.Spinner animation=\"grow\" variant=\"light\" />\r\n                <ReactBootStrap.Spinner animation=\"grow\" variant=\"dark\" />\r\n              </div>\r\n            </div>\r\n        )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CitizenProfile;\r\n","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProposals\\CreateProposals\\CitizenCreateProposals.jsx",["457","458"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { Formik, Form, ErrorMessage, Field } from 'formik';\r\nimport * as ReactBootStrap from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\nimport { Redirect } from 'react-router';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport FormikInput from '../../../../components/UI/Input/FormikInput/FormikInput';\r\nimport SubmitButton from '../../../../components/UI/Buttons/SubmitButton/SubmitButton';\r\nimport CancelButton from '../../../../components/UI/Buttons/CancelButton/CancelButton';\r\nimport Swal from 'sweetalert2';\r\nimport { Context } from '../../../../context/Context';\r\nimport classes from './CitizenCreateProposals.module.css';\r\nimport axios from 'axios';\r\n\r\n\r\nconst CitizenCreateProposal = () => {\r\n    const citizenUser = useContext(Context);\r\n    const [userId, setUserId] = useState();\r\n    const [redirect, setRedirect] = useState(false);\r\n    const [loading, setLoading] =  useState(true);\r\n    const [file, setFile] = useState(null);\r\n    const userType = citizenUser.user.data.user.userType;\r\n\r\n    useEffect(() => {\r\n        const getUserId = async () => {\r\n            const { user:{ data: { user: { firstname } } }} = citizenUser;\r\n            const { user:{ data: { user: { lastname } } }} = citizenUser;\r\n            let username = JSON.stringify(firstname+\" \"+lastname);\r\n            username = username.replace(/['\"]+/g, '');\r\n            setUserId(username);\r\n        }\r\n        getUserId();\r\n    },[]);\r\n\r\n    console.log(userId);  \r\n    const initialValues = {\r\n        userId: citizenUser.user.data.user._id,\r\n        userName: '',\r\n        title: '',\r\n        description: '',\r\n        location: '',\r\n        status:'Pending',\r\n    \r\n    };\r\n    \r\n    \r\n    const onSubmit = async (values) => {\r\n        console.log('Form values', values);\r\n\r\n        const userName = values.userName.replace('',userId)\r\n        const newValues = {...values, userName, userType}\r\n        const images = \"\";\r\n\r\n        const proposalData = {\r\n            description: newValues.description,\r\n            location: newValues.location,\r\n            status: newValues.status,\r\n            title: newValues.title,\r\n            userId: newValues.userId,\r\n            userName: newValues.userName,\r\n            userType: newValues.userType,\r\n            images,\r\n        }\r\n\r\n        if (file) {\r\n            setLoading(false);\r\n            const data = new FormData();\r\n            const filename = Date.now() + file.name;\r\n            data.append(\"name\", filename);\r\n            data.append(\"file\", file);\r\n            data.append(\"upload_preset\", \"dev_prac\");\r\n            data.append(\"cloud_name\", \"karlstorage\");\r\n            try {\r\n                const res = await axios.post(\"https://api.cloudinary.com/v1_1/karlstorage/image/upload\", data);\r\n                proposalData.images = res.data.secure_url;\r\n\r\n                try {\r\n                    const res = await axios.post('/api/proposals', proposalData).catch(err => {\r\n                        console.log('Error: ', err.res.data);\r\n                    });\r\n\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Proposal Created!',\r\n                        text: 'Your proposal is been posted . . .'\r\n                    });\r\n\r\n                    setLoading(true);\r\n                    setRedirect(true);\r\n                } catch (err) {\r\n                    console.log(err)\r\n                    setLoading(true);\r\n                }\r\n            } catch (err) {\r\n                console.log(err)\r\n                setLoading(true);\r\n            }\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Photo is requried!',\r\n                text: 'Upload a photo',\r\n            });\r\n            setLoading(true);\r\n        }\r\n    };\r\n    \r\n    const validationSchema = Yup.object({\r\n        userName: Yup.string(),\r\n        title: Yup.string().required('Required'),\r\n        description: Yup.string().required('Required'),\r\n        location: Yup.string().required(\"Required\"),\r\n    });\r\n    // console.log(citizenUser.user.data.user._id);\r\n    return(\r\n        <>\r\n            { redirect && (<Redirect to = '/citizen-proposals' />) }\r\n            {loading ? (\r\n            <Container className={classes.CitizenCreateProposalContentContainer}>\r\n                {/* <div className = 'col-lg-10 offset-lg-1'> */}\r\n                <Row>\r\n                    <div className={classes.QuoteDiv}>\r\n                        <h1>Go create your proposal and make an impact!</h1>\r\n                    </div>\r\n                    <Formik\r\n                        initialValues={initialValues}\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        <Form className={classes.CitizenCreateProposalForm}>\r\n                            <Col>\r\n                                <Row>\r\n                                    <Col sm={6}>\r\n                                        <Row className={classes.CitizenCreateProposalFormInput}>\r\n                                            <label>Proposal Title</label>\r\n                                            <FormikInput \r\n                                            type=\"text\"\r\n                                            placeholder=\"Proposal Title\"\r\n                                            id=\"title\"\r\n                                            name=\"title\"\r\n                                            />\r\n                                            <ErrorMessage name=\"title\">\r\n                                                {errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>}\r\n                                            </ErrorMessage>\r\n                                        </Row>\r\n                                        <Row className={classes.CitizenCreateProposalFormInput}>\r\n                                            <label>Description</label>\r\n                                            <FormikInput \r\n                                                type=\"text\"\r\n                                                placeholder=\"Description\"\r\n                                                id=\"description\"\r\n                                                name=\"description\"\r\n                                            />\r\n                                            <ErrorMessage name=\"description\">\r\n                                                {\r\n                                                    errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n                                                }\r\n                                            </ErrorMessage>\r\n                                        </Row>\r\n                                        {/* <Row className={classes.CitizenCreateProposalFormInput}>\r\n                                            <FormikInput \r\n                                                type=\"text\"\r\n                                                placeholder=\"userName\"\r\n                                                id=\"userName\"\r\n                                                name=\"userName\"\r\n                                            />\r\n                                        </Row> */}\r\n                                    </Col>\r\n                                    <Col className={classes.CitizenCreateProposalHeader} sm={6}>\r\n                                            <h2>Pursue your calling </h2>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row >\r\n                                    {/* <Col className={classes.CitizenCreateProposalFormInput}>\r\n                                        <label>When to Start Hopefully</label>\r\n                                        <FormikInput \r\n                                        type=\"text\"\r\n                                        placeholder=\"Date of Start hopefully\"\r\n                                        id=\"date\"\r\n                                        name=\"date\"\r\n                                        />\r\n                                        <ErrorMessage name=\"date\">\r\n                                            {\r\n                                                errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n                                            }\r\n                                        </ErrorMessage>\r\n                                    </Col> */}\r\n                                    <Col className={classes.CitizenCreateProposalFormInput}>\r\n                                        <label>Where</label>\r\n                                        <FormikInput \r\n                                            type=\"text\"\r\n                                            placeholder=\"Where\"\r\n                                            id=\"location\"\r\n                                            name=\"location\"\r\n                                        />\r\n                                        <ErrorMessage name=\"location\">\r\n                                            {\r\n                                                errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n                                            }\r\n                                        </ErrorMessage>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className={classes.citizensubmitreportphotoinput}>\r\n                                    <Col className={classes.CitizenCreateProposalFormInput} >\r\n                                        <label style={{textAlign: 'center', marginTop: '5%'}}>Photo</label>\r\n\r\n                                        <div className = 'CitizenCreateProposalImg'>\r\n                                            {file && <img src = { (URL.createObjectURL(file)) } alt = '' onClick={()=> window.open(URL.createObjectURL(file), \"_blank\")}/>}\r\n                                        </div>\r\n\r\n                                        <label  htmlFor=\"images\"><i className=\"fas fa-image\"></i></label>\r\n\r\n                                        <Field \r\n                                            type=\"file\"\r\n                                            id=\"images\"\r\n                                            name=\"images\"\r\n                                            style={{display: 'none'}}\r\n                                            onChange = {(e) => setFile(e.target.files[0])}\r\n                                        />\r\n                                        <ErrorMessage name=\"images\">\r\n                                            {\r\n                                                errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n                                            }\r\n                                        </ErrorMessage>\r\n                                    </Col>\r\n                                    \r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div className={classes.ButtonDiv}>\r\n                                            <SubmitButton />\r\n                                            <CancelButton />\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            \r\n                        </Form>\r\n                    </Formik>    \r\n                </Row>\r\n                {/* </div> */}\r\n            </Container>\r\n            ) : (\r\n                    <div style = {{\r\n                        color: '#777',\r\n                        textAlign: 'center',\r\n                    }}>\r\n                      <h2 style = {{marginTop: '10%'}}>Processing Please Wait</h2>\r\n                      <div>\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"primary\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"secondary\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"success\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"danger\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"warning\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"info\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"light\" />\r\n                        <ReactBootStrap.Spinner animation=\"grow\" variant=\"dark\" />\r\n                      </div>\r\n                    </div>\r\n            )}\r\n        </>\r\n\r\n    //  {/* <React.Fragment> */}\r\n    //          {/* <div className={classes.CitizenCreateProposalContentDiv}> */}\r\n    //              {/* <div className={classes.QuoteDiv}> */}\r\n    //                  {/* <h1>Go create your proposal and make an impact!</h1> */}\r\n    //              {/* </div> */}\r\n\r\n    //              {/* <Formik */}\r\n    //                 {/* //  initialValues={initialValues}\r\n    //                 //  validationSchema={validationSchema}\r\n    //                 //  onSubmit={onSubmit}\r\n    //             //  > */}\r\n    //                  {/* <Form className={classes.CitizenCreateProposalForm}> */}\r\n    //                      {/* <div className={classes.CitizenCreateProposalFormDiv}> */}\r\n    //                          {/* <div className={classes.CitizenCreateProposalFormInput}> */}\r\n    //                              {/* <label>Proposal Title</label> */}\r\n    //                              {/* <FormikInput  */}\r\n    //                                 {/* //  type=\"text\"\r\n    //                                 //  placeholder=\"Proposal Title\"\r\n    //                                 //  id=\"title\"\r\n    //                                 //  name=\"title\"\r\n    //                             //  /> */}\r\n    //                              {/* <ErrorMessage name=\"title\"> */}\r\n    //                                  {/* {errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>} */}\r\n    //                              {/* </ErrorMessage> */}\r\n    //                          {/* </div> */}\r\n    //                          {/* <div className={classes.CitizenCreateProposalFormInput}> */}\r\n    //                              {/* <label>Description</label> */}\r\n    //                              {/* <FormikInput  */}\r\n    //                                 {/* //  type=\"text\"\r\n    //                                 //  placeholder=\"Description\"\r\n    //                                 //  id=\"description\"\r\n    //                                 //  name=\"description\"\r\n    //                             //  /> */}\r\n    //                              {/* <ErrorMessage name=\"name\"> */}\r\n    //                                  {/* { */}\r\n    //                                     {/* //  errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n    //                                 //  } */}\r\n    //                              {/* </ErrorMessage> */}\r\n    //                          {/* </div> */}\r\n    //                          {/* <div className={classes.CitizenCreateProposalFormInput}> */}\r\n    //                              {/* <label>When</label> */}\r\n    //                              {/* <FormikInput  */}\r\n    //                                 {/* //  type=\"text\"\r\n    //                                 //  placeholder=\"When\"\r\n    //                                 //  id=\"date\"\r\n    //                                 //  name=\"date\"\r\n    //                             //  /> */}\r\n    //                              {/* <ErrorMessage name=\"date\"> */}\r\n    //                                  {/* { */}\r\n    //                                     {/* //  errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n    //                                 //  } */}\r\n    //                              {/* </ErrorMessage> */}\r\n    //                          {/* </div> */}\r\n    //                          {/* <div className={classes.CitizenCreateProposalFormInput}> */}\r\n    //                              {/* <label>Where</label> */}\r\n    //                              {/* <FormikInput  */}\r\n    //                                 {/* //  type=\"text\"\r\n    //                                 //  placeholder=\"Where\"\r\n    //                                 //  id=\"location\"\r\n    //                                 //  name=\"location\"\r\n    //                             //  /> */}\r\n    //                              {/* <ErrorMessage name=\"location\"> */}\r\n    //                                  {/* { */}\r\n    //                                     {/* //  errorMsg => <div className={classes.InputValidation}>{errorMsg}</div>\r\n    //                                 //  } */}\r\n    //                              {/* </ErrorMessage> */}\r\n    //                          {/* </div> */}\r\n    //                      {/* </div> */}\r\n    //                      {/* <div className={classes.ButtonDiv}> */}\r\n    //                          {/* <SubmitButton /> */}\r\n    //                          {/* <CancelButton /> */}\r\n    //                      {/* </div> */}\r\n    //                  {/* </Form> */}\r\n    //              {/* </Formik> */}\r\n    //          {/* </div> */}\r\n    //      {/* </React.Fragment> */}\r\n    );\r\n};\r\n\r\nexport default CitizenCreateProposal;","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\ViewReports\\CitizenViewReport.jsx",["459","460","461"],"import React from 'react';\r\nimport { Row, Col, Form, Button, Container } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './CitizenViewReport.css';\r\n\r\nconst CitizenViewReport = () => (\r\n    <>\r\n        <Container className = 'citizenViewReport-container'>\r\n            <Row className=\"citizenViewReport-header\">\r\n                <Row>\r\n                    <Col claasName=\"citizenViewReport-title\">\r\n                    <h2>Ahay</h2>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"citizenViewReport-auth\">\r\n                    <Col>Reporter: IC</Col>\r\n                    <Col>Submitted on: September 22, 2021</Col>\r\n                </Row>\r\n            </Row>\r\n            <Row className=\"citizenViewReport-description\">\r\n                <p>So ayun nga, nag catgirl ata yung prof namin sa klase. Di ako sure mismo kasi nakaasa lang ako sa chat namin nung oras na yun.</p>\r\n            </Row> \r\n            <Row className=\"citizenViewReport-footer\">\r\n                <Row className=\"citizenViewReport-details\">\r\n                    <Col>Where: Cainta, Rizal</Col>\r\n                    <Col>Status: Confirmed</Col>\r\n                </Row>\r\n                <Row className=\"citizenViewReport-img-container\">\r\n                    <Col className=\"citizenViewReport-img-frame\">\r\n                        <img src=\"https://imgur.com/vxihw43.png\" alt=\"Report\"></img>\r\n                    </Col>\r\n                </Row>\r\n            </Row>\r\n        </Container>\r\n    </>\r\n);\r\nexport default CitizenViewReport;","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\ChatReports\\CitizenChatReport.jsx",["462","463","464","465","466","467"],"import React, { useState, useRef, useEffect, useContext, useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport { io } from 'socket.io-client';\r\n\r\nimport CardHeader from '../../../../components/UI/Cards/CardHeader/CardHeader';\r\nimport AdminLayout from '../../../../components/AllAdmin/Administrator/AdminLayout/AdminLayout';\r\nimport CitizenConversations from './CitizenConversations/CitizenConversations';\r\nimport CitizenMessage from './CitizenMessage/CitizenMessage';\r\nimport { Context } from '../../../../context/Context';\r\n\r\nimport './CitizenChatReport.module.css';\r\nimport classes from './CitizenChatReport.module.css';\r\nimport CitizenChatOnline from './ChatOnline/CitizenChatOnline';\r\n\r\nconst CitizenChatReport = ( props ) => {\r\n    const [conversations, setConversations] = useState([]);\r\n    const [currentChat, setCurrentChat] = useState(null);\r\n    const [chatMessages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const [arrivalMessage, setArrivalMessage] = useState(null);\r\n    const [allAdmins, setAllAdmins] = useState([]);\r\n    const [admin, setAdmin] = useState([]);\r\n    const socket = useRef();\r\n    const { user } = useContext(Context);\r\n    const scrollRef = useRef();\r\n\r\n    useEffect(() => {\r\n        socket.current = io(\"ws://localhost:8800\");\r\n        socket.current.on(\"getMessage\", data => {\r\n            setArrivalMessage({\r\n                sender: data.senderId,\r\n                text: data.text,\r\n                createdAt: Date.now()\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     const sendRequest = async () => {\r\n    //         const response = await fetch('/api/admin');\r\n    //         const responseData = await response.json();\r\n    //         setAllAdmins(responseData);\r\n    //        // console.log(responseData)\r\n    //     }\r\n    //     sendRequest();\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        arrivalMessage && currentChat?.members.includes(arrivalMessage.sender) &&\r\n        setMessages(prev => [...prev, arrivalMessage]);\r\n    }, [arrivalMessage, currentChat]);\r\n\r\n    useEffect(() => {\r\n        socket.current.emit(\"addUser\", user.data.user._id);\r\n        socket.current.on(\"getUsers\", users => {\r\n            console.log(users);\r\n        });\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        const getConversations = async () => {\r\n            try {\r\n                const res = await axios.get(\"/api/conversations/\" + user.data?.user?._id);\r\n                setConversations(res.data);\r\n                // console.log(res);\r\n            } catch(err) {\r\n                console.log(err);\r\n            }\r\n        };\r\n\r\n        getConversations();\r\n    }, [user.data]);\r\n\r\n    useEffect(() => {\r\n        const getMessages = async () => {\r\n            try {\r\n                const res = await axios.get(\"/api/messages/\" + currentChat?._id);\r\n                setMessages(res.data);\r\n                //console.log(res);\r\n            } catch(err) {\r\n                console.log(err);\r\n            }\r\n        };\r\n        getMessages();\r\n    }, [currentChat]);\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const message = {\r\n            sender: user.data.user._id,\r\n            text: newMessage,\r\n            conversationId: currentChat._id\r\n        }\r\n\r\n        const receiverId = currentChat.members.find(member => member !== user.data?.user?._id);\r\n\r\n        socket.current.emit(\"sendMessage\", {\r\n            senderId: user.data?.user?._id,\r\n            receiverId,\r\n            text: newMessage \r\n        });\r\n\r\n        try {\r\n            const res = await axios.post(\"/api/messages/\", message);\r\n            setMessages([...chatMessages, res.data]);\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n\r\n        Array.from(document.querySelectorAll(\"textarea\")).forEach(\r\n            input => (input.value = \"\"),\r\n            setNewMessage(''),\r\n        );\r\n    };\r\n\r\n    \r\n    // const createConversation = async (e) => {\r\n    //     e.preventDefault();\r\n    //     const message = {\r\n    //         sender: user.data.user._id,\r\n    //         text: newMessage,\r\n    //         conversationId: currentChat._id\r\n    //     }\r\n\r\n    //     const currentSender = user.data.user._id;\r\n    //     const receiverId = currentChat.members.find(member => member !== user.data.user._id);\r\n\r\n    //     socket.current.emit(\"sendMessage\", {\r\n    //         senderId: user.data.user._id,\r\n    //         receiverId,\r\n    //         text: newMessage \r\n    //     });\r\n\r\n        \r\n\r\n    //     try {\r\n    //         const resConvo = await axios.post('/api/conversations/', {currentSender, receiverId});\r\n    //         console.log(resConvo);\r\n\r\n    //     } catch (err){\r\n    //         console.log(err);\r\n    //     }\r\n    // }\r\n\r\n    // console.log(user.data.user._id);\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <div className={classes.Container}>\r\n                <div className={classes.AdminMessages}>\r\n                    <CardHeader>\r\n                        <h2 className={classes.Text}>Messages</h2>\r\n                    </CardHeader>\r\n                </div>\r\n                {/* List of chats */}\r\n                <div className={classes.Messenger}>\r\n                    <div className={classes.AdminChatMenu}>\r\n                        <input\r\n                            placeholder=\"Search messages\"\r\n                            className={classes.AdminChatMenuSearch}\r\n                        />\r\n                        {conversations.map(c => (\r\n                            <div onClick={() => setCurrentChat(c)}>\r\n                                <CitizenConversations conversation={c} currentUser={user.data?.user}  />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    {/* Chatbox */}\r\n                    <div className={classes.AdminChat}>\r\n                        \r\n                        <div className={classes.AdminChatWrapper}>\r\n                            { currentChat ?\r\n                                <>\r\n                                <div className={classes.AdminChatBoxTop}>\r\n                                {\r\n                                    chatMessages.map(m => (\r\n                                        <div>\r\n                                            <CitizenMessage messages={m} own={m.sender === user.data?.user?._id} />\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                                </div>\r\n                                <div className={classes.AdminChatBoxBottom}>\r\n                                    <textarea\r\n                                        className={classes.ChatMessageInput}\r\n                                        placeholder=\"Write something...\"\r\n                                        onChange={(e) => setNewMessage(e.target.value)}\r\n                                        value={newMessage}\r\n                                    ></textarea>\r\n                                    <button className={classes.ChatSubmitButton} onClick={handleSubmit}>Send</button>\r\n                                </div>\r\n                                </> \r\n                                : \r\n                                <div className={classes.EmptyConvo}>\r\n                                    <p className={classes.EmptyConvoText}>Open a conversation</p>\r\n                                </div>\r\n                            }\r\n                        </div> \r\n                        \r\n                    </div>\r\n                    {/* Admins */}\r\n                    <div className={classes.AdminList}>\r\n                        <CitizenChatOnline\r\n                            admin={admin}\r\n                            currentId={user.data.user._id}\r\n                            setCurrentChat={setCurrentChat}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div> \r\n        </React.Fragment>\r\n    );\r\n\r\n};\r\n\r\nexport default CitizenChatReport;\r\n","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenProposals\\ViewProposals\\CitizenViewProposal.jsx",["468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493"],"import React, {useEffect, useState, useContext} from 'react';\r\nimport axios from 'axios';\r\nimport { Row, Col, Button, Container, ListGroup, ListGroupItem } from 'react-bootstrap';\r\nimport { Formik, Form, ErrorMessage, Field, validateYupSchema } from 'formik';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport './CitizenViewProposal.css';\r\nimport FormikInput from '../../../../components/UI/Input/FormikInput/FormikInput';\r\nimport SubmitButton from '../../../../components/UI/Buttons/SubmitButton/SubmitButton';\r\nimport { Context } from '../../../../context/Context';\r\nimport * as Yup from 'yup';\r\n\r\nconst CitizenViewProposal = () => {\r\n    const [proposal, setProposal] = useState([]);\r\n    const [comments, setComments] = useState();\r\n    const [upvoteclicked, upvotesetClicked] = useState(false);\r\n    const [downclicked, downsetClicked] = useState(false);\r\n    const { user, dispatch } = useContext(Context);\r\n    const [disable, setDisable] = useState(false);\r\n    const [arrEmpty, setarrEmpty] = useState();\r\n    let count = 0;\r\n    \r\n    const proposalId = localStorage.getItem('proposalid');\r\n    // const name = comments.user;\r\n    // const msg = comments.message;\r\n    \r\n    // Proposal\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            // console.log(proposalId)\r\n            const response = await fetch(`/api/proposals/${proposalId}`);\r\n            // console.log(response)\r\n            const responseData = await response.json();\r\n            // console.log(responseData)\r\n            // const newResponseData = JSON.stringify(responseData.data);\r\n            // console.log(newResponseData);\r\n            setProposal(responseData.data.proposal);\r\n            setComments(responseData.data.proposal.comments)\r\n        };\r\n        sendRequest();\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        if(proposal.upvote){\r\n            const checkUser = async () => {\r\n                // Get UserId from context\r\n                const userId = user.data.user._id;\r\n                // Get UserId from upvotes Array (get proposal ID, get vote array)\r\n                const test = userId;\r\n                //Compare the two\r\n                const upvotes = proposal.upvote;\r\n                const result = upvotes.includes(test);\r\n\r\n                // console.log(result); // true\r\n                //if true Disable Button\r\n                if(result==true){\r\n                    upvotesetClicked(true)\r\n                }else{\r\n                    upvotesetClicked(false)\r\n                }\r\n            };\r\n            checkUser();\r\n        }\r\n    },[proposal])\r\n\r\n    useEffect(()=>{\r\n        if(proposal.downvote){\r\n            const checkUser = async () => {\r\n                // Get UserId from context\r\n                const userId = user.data.user._id;\r\n                // Get UserId from upvotes Array (get proposal ID, get vote array)\r\n                const test = userId;\r\n                //Compare the two\r\n                const upvotes = proposal.downvote;\r\n                const result = upvotes.includes(test);\r\n\r\n                // console.log(result); // true\r\n                //if true Disable Button\r\n                if(result==true){\r\n                    downsetClicked(true)\r\n                }else{\r\n                    downsetClicked(false)\r\n                }\r\n            };\r\n            checkUser();\r\n        }\r\n    },[proposal])\r\n\r\n    const castUpVote = async (proposalId, userId) =>{\r\n        upvotesetClicked(true);\r\n        const removeVote = {\r\n            downvote:userId\r\n        }\r\n        try{\r\n            if(downclicked){\r\n                const response = await axios.patch(`/api/proposals/removeDownVote/${proposalId}`, removeVote).then((result)=>{\r\n                        if (result) {\r\n                            console.log(result)\r\n                            window.location.reload(false);\r\n                        }\r\n                    }\r\n                );\r\n                const addUserVote = {\r\n                    upvote:userId\r\n                };\r\n                const response2 = await axios.patch(`/api/proposals/upVote/${proposalId}`, addUserVote).then((result)=>{\r\n                    if (result) {\r\n                        console.log(result)\r\n                        window.location.reload(false);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n            else{\r\n                const addUserVote = {\r\n                    upvote:userId\r\n                };\r\n                const response = await axios.patch(`/api/proposals/upVote/${proposalId}`, addUserVote).then((result)=>{\r\n                        if (result) {\r\n                            console.log(result)\r\n                            window.location.reload(false);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err.response)\r\n        }\r\n    }\r\n\r\n\r\n    const castDownVote = async (proposalId, userId) =>{\r\n        downsetClicked(true);\r\n        const removeVote = {\r\n            upvote:userId\r\n        }\r\n        try{\r\n            if(upvoteclicked){\r\n                \r\n                    const response = await axios.patch(`/api/proposals/removeUpVote/${proposalId}`, removeVote).then((result)=>{\r\n                            if (result) {\r\n                                console.log(result)\r\n                                window.location.reload(false);\r\n                            }\r\n                        }\r\n                    );\r\n                    const addUserVote = {\r\n                        downvote:userId\r\n                    };\r\n                    // Add userId to proposals upvote array\r\n                    const response2 = await axios.patch(`/api/proposals/downVote/${proposalId}`, addUserVote).then((result)=>{\r\n                            if (result) {\r\n                                console.log(result)\r\n                                window.location.reload(false);\r\n                            }\r\n                        }\r\n                    );\r\n            }\r\n            else{\r\n                const addUserVote = {\r\n                    downvote:userId\r\n                };\r\n                //Add userId to proposals upvote array\r\n                const response = await axios.patch(`/api/proposals/downVote/${proposalId}`, addUserVote).then((result)=>{\r\n                        if (result) {\r\n                            console.log(result)\r\n                            window.location.reload(false);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    // const postComment = async (proposalId,userId)\r\n\r\n    const initialValues = {\r\n        user:user.data.user.firstname+\" \"+user.data.user.lastname,\r\n        message:''\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        user: Yup.string(),\r\n        message:  Yup.string().required(\"Required\")\r\n    });\r\n\r\n    const onSubmit = async (values) => {\r\n        // console.log('Form values', values);\r\n\r\n        // const username = user.data.user.firstname+\" \"+user.data.user.lastname;\r\n        // const comment = {\r\n        //     user:username,\r\n        //     values\r\n        // };\r\n        console.log(values)\r\n        const res = await axios.patch(`/api/proposals/comments/${proposalId}`, values).catch(err => {\r\n            console.log('Error: ', err.res.values);\r\n        });\r\n        window.location.reload(false);\r\n        // const {...data} = newValues;\r\n        // const res = await axios.patch('/api/proposals/comments/', data).catch(err => {\r\n        //     console.log('Error: ', err.res.data);\r\n        // });\r\n\r\n        // setRedirect(true);\r\n    };\r\n    let test = proposal.comments\r\n    console.log(test);\r\n    // for(a=1; a < comments.length(), a++){\r\n\r\n    // };\r\n    return(\r\n        <Container className='citizenViewProposal-container'>\r\n                <Row className='citizenViewProposal-long'>\r\n                    <Col className='citizenViewProposal-title'>\r\n                        <h1>{proposal.title}</h1>\r\n                    </Col>\r\n                    <Col className='citizenViewProposal-description'>\r\n                        <p>{proposal.description}\r\n                        </p>\r\n\r\n                        <p>Where: {proposal.location}</p>\r\n                    </Col> \r\n                    \r\n                        <Col className='citizenViewProposal-img-frame'>\r\n                            <img src='https://imgur.com/7pFJPjg.png'  className='citizenViewProposal-img' alt='Proposal'/>\r\n                        </Col>\r\n                    \r\n                    <Col className='citizenViewProposal-auth'>\r\n                            <p>Proposed by: {proposal.userName}</p>\r\n                            <p>Proposed on: {proposal.createdAt}</p>\r\n                            <p>Status: {proposal.status}</p>\r\n                    </Col>\r\n                    <Col className='citizenViewProposal-status'>Status: {proposal.status}</Col>\r\n                    <Col className='citizenViewProposal-btn-container'>\r\n                        <Row className='citizenViewProposal-btn-frame'>\r\n                            {/* Set button to disabled when current user upvoted propopsal onClick={() => castUpVote(proposal._id, user.data.user._id)} {proposal.upvote.length ? proposal.upvote.length : 0}*/}\r\n                            <Button disabled={ upvoteclicked } onClick={() => castUpVote(proposal._id, user.data.user._id)} className='citizenViewProposal-btn'>Upvote: </Button>\r\n                        </Row>\r\n                        <Row  className='citizenViewProposal-btn-frame'>\r\n                            {/* Set button to disabled when current user downvoted propopsal  onClick={() => castDownVote(proposal._id, user.data.user._id)} {proposal.downvote.length ? proposal.downvote.length : 0}*/}\r\n                            <Button disabled={ downclicked } onClick={() => castDownVote(proposal._id, user.data.user._id)} className='citizenViewProposal-btn'>Downvote: </Button>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className='citizenViewProposal-inputcomment-container'>\r\n                    <Formik\r\n                        initialValues={initialValues}\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        <Form>\r\n                            <Field\r\n                                className='citizenViewProposal-writecomment'\r\n                                type='text'\r\n                                placeholder='write a comment'\r\n                                id='message'\r\n                                name='message'/>\r\n                            {/* <ErrorMessage name=\"comments\">\r\n                                    {errorMsg => <div className=\"InputValidation\">{errorMsg}</div>}\r\n                                </ErrorMessage> */}\r\n                                <div className='buttonContainer'>\r\n                                    <SubmitButton />\r\n                                </div>\r\n                        </Form>\r\n                    </Formik>\r\n                </Row>\r\n                <Row className='citizenViewProposal-writecomment-container'>\r\n                    {/* <Col className='citizenViewProposal-comment'>\r\n                        <Row className='citizenViewProposal-comment-img'>\r\n                            <img src='https://imgur.com/82XUVjV.png'/>\r\n                        </Row>\r\n                        <Row className='citizenViewProposal-comment-body'>\r\n                            <Col>Kevin Gojocco</Col>\r\n                            <Col>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor \r\n                            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud \r\n                            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure \r\n                            dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \r\n                            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit \r\n                            anim id est laborum.</Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col className='citizenViewProposal-comment'>\r\n                        <Row className='citizenViewProposal-comment-img' c={9}>\r\n                            <img src='https://imgur.com/urZfDtd.png'/>\r\n                        </Row>\r\n                        <Row className='citizenViewProposal-comment-body'>\r\n                            <Col>John Doe</Col>\r\n                            <Col>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor \r\n                            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud \r\n                            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure \r\n                            dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \r\n                            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit \r\n                            anim id est laborum.</Col>\r\n                        </Row>\r\n                    </Col> */}\r\n                    {comments && comments.map(comment => (\r\n                    <Col className='citizenViewProposal-comment' key={comment._id}>\r\n                        <Row className='citizenViewProposal-comment-img' c={9}>\r\n                            <img src='https://imgur.com/urZfDtd.png'/>\r\n                        </Row>\r\n                        <Row className='citizenViewProposal-comment-body'>\r\n                            <Col>{comment.user}</Col>\r\n                            <Col>{comment.message}</Col>\r\n                        </Row>\r\n                    </Col>\r\n                    ))};\r\n                </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CitizenViewProposal;\r\n","D:\\Projects\\SmartCTzen\\client\\src\\components\\SuperAdmin\\SaSideBarData.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\SuperAdmin\\SaSubMenu.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\Landing\\Footer\\Footer.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\api_calls\\adminApiCall.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminLayout\\AdminLayout.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminMessages\\AdminConversations\\AdminConversations.js",["494"],"import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport classes from './AdminConversations.module.css';\r\n\r\nconst AdminConversations = ({conversation, currentUser}) => {\r\n    //insert soon\r\n    const [citizenUser, setCitizenUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const friendId = conversation.members.find(m => m !== currentUser._id);\r\n        \r\n        // console.log(\"current user is \" + currentUser.user._id);\r\n\r\n        const getUser = async () => {\r\n            try {\r\n                const res = await axios.get('/api/citizen/' + friendId);\r\n                setCitizenUser(res.data);\r\n                // console.log(res);\r\n            } catch(err) {\r\n                console.log(err);\r\n            }\r\n        };\r\n        getUser();\r\n    }, [currentUser, conversation]);\r\n\r\n    console.log(citizenUser);\r\n    //console.log(citizenUser._id);\r\n    return(\r\n        <div className={classes.AdminConversations}>\r\n            <img \r\n                className={classes.AdminConversationsImg} \r\n                src={citizenUser?.profilePic}\r\n                alt=\"sample-image\" />\r\n            <span className={classes.ConversationName}>{citizenUser?.firstname + ' ' + citizenUser?.lastname}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminConversations;","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Buttons\\LoginButton\\LoginButton.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Tables\\Tables.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Buttons\\SubmitButton\\SubmitButton.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Buttons\\CancelButton\\CancelButton.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Cards\\CardDashboard\\CardSummary.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Cards\\CardDashboard\\CardGraph\\CardGraph.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Input\\Input.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Cards\\CardForm\\CardForm.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Cards\\CardHeader\\CardHeader.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\AllAdmin\\Administrator\\AdminMessages\\AdminMessage\\AdminMessage.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Input\\FormikInput\\FormikInput.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\ChatReports\\ChatOnline\\CitizenChatOnline.jsx",["495","496","497"],"import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport classes from './CitizenChatOnline.module.css';\r\n\r\nconst CitizenChatOnline = ({admin, currentId, setCurrentChat}) => {\r\n    const [allAdmins, setAllAdmins] = useState([]);\r\n    const [selectedAdmin, setSelectedAdmin] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            const response = await fetch('/api/admin');\r\n            const responseData = await response.json();\r\n            setAllAdmins(responseData);\r\n           // console.log(responseData)\r\n        }\r\n        sendRequest();\r\n    }, []);\r\n\r\n    const handleClick = async (user) => {\r\n        try {\r\n            const res = await axios.get(`/api/conversations/${currentId}/${user._id}` );\r\n            setCurrentChat(res.data);\r\n            console.log(res.data);\r\n\r\n            if (res.data !== null) {\r\n                return;\r\n            } else {\r\n                const newConvo = await axios.post('/api/conversations/', {\r\n                    senderID: currentId,\r\n                    receiverID: user._id\r\n                });\r\n                console.log(newConvo.data.savedConversation);\r\n            }\r\n\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <div className={classes.ChatOnline}>\r\n            {allAdmins.map((admin) => (\r\n            <div className={classes.ChatOnlineAdmin} key={admin._id}  onClick={() => handleClick(admin)}> \r\n                <div className={classes.ChatOnlineImageContainer}>\r\n                <img \r\n                    className={classes.ChatOnlineImage}\r\n                    src={admin.profilePic} \r\n                />\r\n                <div className={classes.ChatOnlineBadge}></div>\r\n                </div>\r\n                <span className={classes.ChatOnlineName}>{admin.username}</span>\r\n            </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CitizenChatOnline;\r\n\r\n","D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\ChatReports\\CitizenMessage\\CitizenMessage.jsx",[],"D:\\Projects\\SmartCTzen\\client\\src\\pages\\Citizen\\CitizenReports\\ChatReports\\CitizenConversations\\CitizenConversations.jsx",["498"],"import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport classes from './CitizenConversations.module.css';\r\n\r\nconst CitizenConversations = ({conversation, currentUser}) => {\r\n    const [adminUser, setAdminUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const adminId = conversation.members.find(m => m !== currentUser._id);\r\n        //console.log(\"current user \" + adminId);\r\n\r\n        const getAdminUser = async () => {\r\n            try {\r\n                const res = await axios.get('/api/admin/' + adminId);\r\n                setAdminUser(res.data);\r\n                // console.log(res.data);\r\n            } catch(err) {\r\n                console.log(err);\r\n            }\r\n        }; \r\n        getAdminUser();\r\n    }, [currentUser, conversation]);\r\n\r\n    \r\n    console.log(adminUser);\r\n\r\n    return(\r\n        <div className={classes.CitizenConversations}>\r\n            <img \r\n                className={classes.CitizenConversationsImg}\r\n                src={adminUser?.profilePic}\r\n                alt=\"sample-image\"\r\n            />\r\n            <span className={classes.ConversationName}>{adminUser?.username}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CitizenConversations;","D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Navigation\\Toolbar\\Toolbar.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Navigation\\NavigationItems\\NavigationItems.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js",[],"D:\\Projects\\SmartCTzen\\client\\src\\components\\UI\\Buttons\\AdminProfileButton\\AdminProfileButton.js",[],{"ruleId":"499","severity":1,"message":"500","line":48,"column":8,"nodeType":"501","messageId":"502","endLine":48,"endColumn":19},{"ruleId":"499","severity":1,"message":"503","line":49,"column":8,"nodeType":"501","messageId":"502","endLine":49,"endColumn":18},{"ruleId":"504","replacedBy":"505"},{"ruleId":"506","replacedBy":"507"},{"ruleId":"499","severity":1,"message":"508","line":7,"column":10,"nodeType":"501","messageId":"502","endLine":7,"endColumn":17},{"ruleId":"499","severity":1,"message":"509","line":26,"column":11,"nodeType":"501","messageId":"502","endLine":26,"endColumn":17},{"ruleId":"510","severity":1,"message":"511","line":28,"column":8,"nodeType":"512","endLine":28,"endColumn":10,"suggestions":"513"},{"ruleId":"499","severity":1,"message":"514","line":39,"column":52,"nodeType":"501","messageId":"502","endLine":39,"endColumn":59},{"ruleId":"499","severity":1,"message":"515","line":81,"column":23,"nodeType":"501","messageId":"502","endLine":81,"endColumn":26},{"ruleId":"499","severity":1,"message":"515","line":46,"column":23,"nodeType":"501","messageId":"502","endLine":46,"endColumn":26},{"ruleId":"499","severity":1,"message":"516","line":1,"column":39,"nodeType":"501","messageId":"502","endLine":1,"endColumn":45},{"ruleId":"499","severity":1,"message":"517","line":5,"column":10,"nodeType":"501","messageId":"502","endLine":5,"endColumn":19},{"ruleId":"499","severity":1,"message":"518","line":28,"column":11,"nodeType":"501","messageId":"502","endLine":28,"endColumn":16},{"ruleId":"499","severity":1,"message":"519","line":28,"column":28,"nodeType":"501","messageId":"502","endLine":28,"endColumn":38},{"ruleId":"499","severity":1,"message":"515","line":45,"column":23,"nodeType":"501","messageId":"502","endLine":45,"endColumn":26},{"ruleId":"499","severity":1,"message":"520","line":1,"column":38,"nodeType":"501","messageId":"502","endLine":1,"endColumn":47},{"ruleId":"499","severity":1,"message":"521","line":9,"column":8,"nodeType":"501","messageId":"502","endLine":9,"endColumn":14},{"ruleId":"499","severity":1,"message":"522","line":11,"column":10,"nodeType":"501","messageId":"502","endLine":11,"endColumn":17},{"ruleId":"499","severity":1,"message":"523","line":11,"column":19,"nodeType":"501","messageId":"502","endLine":11,"endColumn":29},{"ruleId":"510","severity":1,"message":"511","line":24,"column":6,"nodeType":"512","endLine":24,"endColumn":8,"suggestions":"524"},{"ruleId":"525","severity":1,"message":"526","line":62,"column":13,"nodeType":"527","endLine":62,"endColumn":78},{"ruleId":"510","severity":1,"message":"511","line":23,"column":6,"nodeType":"512","endLine":23,"endColumn":8,"suggestions":"528"},{"ruleId":"499","severity":1,"message":"515","line":26,"column":11,"nodeType":"501","messageId":"502","endLine":26,"endColumn":14},{"ruleId":"499","severity":1,"message":"515","line":35,"column":11,"nodeType":"501","messageId":"502","endLine":35,"endColumn":14},{"ruleId":"499","severity":1,"message":"515","line":44,"column":11,"nodeType":"501","messageId":"502","endLine":44,"endColumn":14},{"ruleId":"499","severity":1,"message":"515","line":57,"column":11,"nodeType":"501","messageId":"502","endLine":57,"endColumn":14},{"ruleId":"499","severity":1,"message":"529","line":1,"column":40,"nodeType":"501","messageId":"502","endLine":1,"endColumn":50},{"ruleId":"510","severity":1,"message":"511","line":34,"column":6,"nodeType":"512","endLine":34,"endColumn":8,"suggestions":"530"},{"ruleId":"499","severity":1,"message":"515","line":90,"column":11,"nodeType":"501","messageId":"502","endLine":90,"endColumn":14},{"ruleId":"525","severity":1,"message":"526","line":117,"column":13,"nodeType":"527","endLine":117,"endColumn":79},{"ruleId":"525","severity":1,"message":"526","line":153,"column":15,"nodeType":"527","endLine":153,"endColumn":57},{"ruleId":"499","severity":1,"message":"531","line":2,"column":10,"nodeType":"501","messageId":"502","endLine":2,"endColumn":14},{"ruleId":"499","severity":1,"message":"532","line":4,"column":10,"nodeType":"501","messageId":"502","endLine":4,"endColumn":13},{"ruleId":"499","severity":1,"message":"531","line":2,"column":10,"nodeType":"501","messageId":"502","endLine":2,"endColumn":14},{"ruleId":"499","severity":1,"message":"532","line":4,"column":10,"nodeType":"501","messageId":"502","endLine":4,"endColumn":13},{"ruleId":"499","severity":1,"message":"533","line":2,"column":8,"nodeType":"501","messageId":"502","endLine":2,"endColumn":13},{"ruleId":"499","severity":1,"message":"534","line":3,"column":20,"nodeType":"501","messageId":"502","endLine":3,"endColumn":26},{"ruleId":"499","severity":1,"message":"535","line":11,"column":12,"nodeType":"501","messageId":"502","endLine":11,"endColumn":21},{"ruleId":"499","severity":1,"message":"536","line":11,"column":23,"nodeType":"501","messageId":"502","endLine":11,"endColumn":35},{"ruleId":"499","severity":1,"message":"537","line":12,"column":11,"nodeType":"501","messageId":"502","endLine":12,"endColumn":20},{"ruleId":"510","severity":1,"message":"538","line":21,"column":7,"nodeType":"512","endLine":21,"endColumn":9,"suggestions":"539"},{"ruleId":"499","severity":1,"message":"540","line":4,"column":15,"nodeType":"501","messageId":"502","endLine":4,"endColumn":21},{"ruleId":"499","severity":1,"message":"541","line":4,"column":28,"nodeType":"501","messageId":"502","endLine":4,"endColumn":37},{"ruleId":"499","severity":1,"message":"542","line":5,"column":16,"nodeType":"501","messageId":"502","endLine":5,"endColumn":23},{"ruleId":"499","severity":1,"message":"543","line":9,"column":12,"nodeType":"501","messageId":"502","endLine":9,"endColumn":17},{"ruleId":"499","severity":1,"message":"544","line":9,"column":19,"nodeType":"501","messageId":"502","endLine":9,"endColumn":27},{"ruleId":"525","severity":1,"message":"526","line":93,"column":25,"nodeType":"527","endLine":93,"endColumn":56},{"ruleId":"499","severity":1,"message":"503","line":5,"column":8,"nodeType":"501","messageId":"502","endLine":5,"endColumn":18},{"ruleId":"499","severity":1,"message":"545","line":6,"column":20,"nodeType":"501","messageId":"502","endLine":6,"endColumn":24},{"ruleId":"499","severity":1,"message":"534","line":6,"column":26,"nodeType":"501","messageId":"502","endLine":6,"endColumn":32},{"ruleId":"499","severity":1,"message":"542","line":7,"column":10,"nodeType":"501","messageId":"502","endLine":7,"endColumn":17},{"ruleId":"499","severity":1,"message":"546","line":21,"column":11,"nodeType":"501","messageId":"502","endLine":21,"endColumn":23},{"ruleId":"499","severity":1,"message":"547","line":23,"column":15,"nodeType":"501","messageId":"502","endLine":23,"endColumn":23},{"ruleId":"510","severity":1,"message":"548","line":33,"column":7,"nodeType":"512","endLine":33,"endColumn":9,"suggestions":"549"},{"ruleId":"499","severity":1,"message":"515","line":78,"column":27,"nodeType":"501","messageId":"502","endLine":78,"endColumn":30},{"ruleId":"499","severity":1,"message":"534","line":7,"column":10,"nodeType":"501","messageId":"502","endLine":7,"endColumn":16},{"ruleId":"499","severity":1,"message":"547","line":35,"column":15,"nodeType":"501","messageId":"502","endLine":35,"endColumn":23},{"ruleId":"550","severity":1,"message":"551","line":212,"column":1,"nodeType":"552","messageId":"553","endLine":252,"endColumn":11},{"ruleId":"510","severity":1,"message":"554","line":81,"column":8,"nodeType":"512","endLine":81,"endColumn":10,"suggestions":"555"},{"ruleId":"510","severity":1,"message":"548","line":33,"column":7,"nodeType":"512","endLine":33,"endColumn":9,"suggestions":"556"},{"ruleId":"499","severity":1,"message":"515","line":78,"column":27,"nodeType":"501","messageId":"502","endLine":78,"endColumn":30},{"ruleId":"499","severity":1,"message":"545","line":2,"column":20,"nodeType":"501","messageId":"502","endLine":2,"endColumn":24},{"ruleId":"499","severity":1,"message":"534","line":2,"column":26,"nodeType":"501","messageId":"502","endLine":2,"endColumn":32},{"ruleId":"499","severity":1,"message":"531","line":3,"column":10,"nodeType":"501","messageId":"502","endLine":3,"endColumn":14},{"ruleId":"499","severity":1,"message":"529","line":1,"column":58,"nodeType":"501","messageId":"502","endLine":1,"endColumn":68},{"ruleId":"499","severity":1,"message":"557","line":6,"column":8,"nodeType":"501","messageId":"502","endLine":6,"endColumn":19},{"ruleId":"499","severity":1,"message":"558","line":21,"column":12,"nodeType":"501","messageId":"502","endLine":21,"endColumn":21},{"ruleId":"499","severity":1,"message":"559","line":21,"column":23,"nodeType":"501","messageId":"502","endLine":21,"endColumn":35},{"ruleId":"499","severity":1,"message":"560","line":22,"column":19,"nodeType":"501","messageId":"502","endLine":22,"endColumn":27},{"ruleId":"499","severity":1,"message":"561","line":25,"column":11,"nodeType":"501","messageId":"502","endLine":25,"endColumn":20},{"ruleId":"499","severity":1,"message":"562","line":3,"column":39,"nodeType":"501","messageId":"502","endLine":3,"endColumn":48},{"ruleId":"499","severity":1,"message":"563","line":3,"column":50,"nodeType":"501","messageId":"502","endLine":3,"endColumn":63},{"ruleId":"499","severity":1,"message":"564","line":4,"column":24,"nodeType":"501","messageId":"502","endLine":4,"endColumn":36},{"ruleId":"499","severity":1,"message":"565","line":4,"column":45,"nodeType":"501","messageId":"502","endLine":4,"endColumn":62},{"ruleId":"499","severity":1,"message":"531","line":5,"column":10,"nodeType":"501","messageId":"502","endLine":5,"endColumn":14},{"ruleId":"499","severity":1,"message":"566","line":5,"column":16,"nodeType":"501","messageId":"502","endLine":5,"endColumn":24},{"ruleId":"499","severity":1,"message":"567","line":7,"column":8,"nodeType":"501","messageId":"502","endLine":7,"endColumn":19},{"ruleId":"499","severity":1,"message":"568","line":17,"column":19,"nodeType":"501","messageId":"502","endLine":17,"endColumn":27},{"ruleId":"499","severity":1,"message":"522","line":18,"column":12,"nodeType":"501","messageId":"502","endLine":18,"endColumn":19},{"ruleId":"499","severity":1,"message":"523","line":18,"column":21,"nodeType":"501","messageId":"502","endLine":18,"endColumn":31},{"ruleId":"499","severity":1,"message":"569","line":19,"column":12,"nodeType":"501","messageId":"502","endLine":19,"endColumn":20},{"ruleId":"499","severity":1,"message":"570","line":19,"column":22,"nodeType":"501","messageId":"502","endLine":19,"endColumn":33},{"ruleId":"499","severity":1,"message":"571","line":20,"column":9,"nodeType":"501","messageId":"502","endLine":20,"endColumn":14},{"ruleId":"510","severity":1,"message":"572","line":40,"column":7,"nodeType":"512","endLine":40,"endColumn":9,"suggestions":"573"},{"ruleId":"574","severity":1,"message":"575","line":55,"column":26,"nodeType":"576","messageId":"577","endLine":55,"endColumn":28},{"ruleId":"510","severity":1,"message":"578","line":63,"column":7,"nodeType":"512","endLine":63,"endColumn":17,"suggestions":"579"},{"ruleId":"574","severity":1,"message":"575","line":78,"column":26,"nodeType":"576","messageId":"577","endLine":78,"endColumn":28},{"ruleId":"510","severity":1,"message":"578","line":86,"column":7,"nodeType":"512","endLine":86,"endColumn":17,"suggestions":"580"},{"ruleId":"499","severity":1,"message":"547","line":95,"column":23,"nodeType":"501","messageId":"502","endLine":95,"endColumn":31},{"ruleId":"499","severity":1,"message":"581","line":105,"column":23,"nodeType":"501","messageId":"502","endLine":105,"endColumn":32},{"ruleId":"499","severity":1,"message":"547","line":117,"column":23,"nodeType":"501","messageId":"502","endLine":117,"endColumn":31},{"ruleId":"499","severity":1,"message":"547","line":140,"column":27,"nodeType":"501","messageId":"502","endLine":140,"endColumn":35},{"ruleId":"499","severity":1,"message":"581","line":151,"column":27,"nodeType":"501","messageId":"502","endLine":151,"endColumn":36},{"ruleId":"499","severity":1,"message":"547","line":164,"column":23,"nodeType":"501","messageId":"502","endLine":164,"endColumn":31},{"ruleId":"499","severity":1,"message":"515","line":198,"column":15,"nodeType":"501","messageId":"502","endLine":198,"endColumn":18},{"ruleId":"525","severity":1,"message":"526","line":303,"column":29,"nodeType":"527","endLine":303,"endColumn":71},{"ruleId":"582","severity":1,"message":"583","line":31,"column":13,"nodeType":"527","endLine":34,"endColumn":38},{"ruleId":"499","severity":1,"message":"584","line":8,"column":12,"nodeType":"501","messageId":"502","endLine":8,"endColumn":25},{"ruleId":"499","severity":1,"message":"585","line":8,"column":27,"nodeType":"501","messageId":"502","endLine":8,"endColumn":43},{"ruleId":"525","severity":1,"message":"526","line":47,"column":17,"nodeType":"527","endLine":50,"endColumn":19},{"ruleId":"582","severity":1,"message":"583","line":30,"column":13,"nodeType":"527","endLine":34,"endColumn":15},"no-unused-vars","'ProposalNav' is defined but never used.","Identifier","unusedVar","'ReportsNav' is defined but never used.","no-native-reassign",["586"],"no-negated-in-lhs",["587"],"'Context' is defined but never used.","'string' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["588"],"'control' is assigned a value but never used.","'res' is assigned a value but never used.","'useRef' is defined but never used.","'loginCall' is defined but never used.","'aUser' is assigned a value but never used.","'isFetching' is assigned a value but never used.","'useParams' is defined but never used.","'Tables' is defined but never used.","'disable' is assigned a value but never used.","'setDisable' is assigned a value but never used.",["589"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["590"],"'useReducer' is defined but never used.",["591"],"'Link' is defined but never used.","'Nav' is defined but never used.","'axios' is defined but never used.","'Button' is defined but never used.","'viewCount' is assigned a value but never used.","'setViewCount' is assigned a value but never used.","'projectId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'path'. Either include it or remove the dependency array.",["592"],"'Column' is defined but never used.","'Container' is defined but never used.","'NavLink' is defined but never used.","'views' is assigned a value but never used.","'setViews' is assigned a value but never used.","'Form' is defined but never used.","'deletereport' is assigned a value but never used.","'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'citizenUser'. Either include it or remove the dependency array.",["593"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","React Hook useEffect has a missing dependency: 'citizen'. Either include it or remove the dependency array.",["594"],["595"],"'AdminLayout' is defined but never used.","'allAdmins' is assigned a value but never used.","'setAllAdmins' is assigned a value but never used.","'setAdmin' is assigned a value but never used.","'scrollRef' is assigned a value but never used.","'ListGroup' is defined but never used.","'ListGroupItem' is defined but never used.","'ErrorMessage' is defined but never used.","'validateYupSchema' is defined but never used.","'Redirect' is defined but never used.","'FormikInput' is defined but never used.","'dispatch' is assigned a value but never used.","'arrEmpty' is assigned a value but never used.","'setarrEmpty' is assigned a value but never used.","'count' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'proposalId'. Either include it or remove the dependency array.",["596"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'user.data.user._id'. Either include it or remove the dependency array.",["597"],["598"],"'response2' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'selectedAdmin' is assigned a value but never used.","'setSelectedAdmin' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"599","fix":"600"},{"desc":"599","fix":"601"},{"desc":"599","fix":"602"},{"desc":"599","fix":"603"},{"desc":"604","fix":"605"},{"desc":"606","fix":"607"},{"desc":"608","fix":"609"},{"desc":"606","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"613","fix":"615"},"Update the dependencies array to be: [params.id]",{"range":"616","text":"617"},{"range":"618","text":"617"},{"range":"619","text":"617"},{"range":"620","text":"617"},"Update the dependencies array to be: [path]",{"range":"621","text":"622"},"Update the dependencies array to be: [citizenUser]",{"range":"623","text":"624"},"Update the dependencies array to be: [citizen]",{"range":"625","text":"626"},{"range":"627","text":"624"},"Update the dependencies array to be: [proposalId]",{"range":"628","text":"629"},"Update the dependencies array to be: [proposal, user.data.user._id]",{"range":"630","text":"631"},{"range":"632","text":"631"},[1132,1134],"[params.id]",[961,963],[863,865],[1251,1253],[805,807],"[path]",[1576,1578],"[citizenUser]",[2671,2673],"[citizen]",[1502,1504],[1805,1807],"[proposalId]",[2587,2597],"[proposal, user.data.user._id]",[3376,3386]]